<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="358" onload="init(evt)" viewBox="0 0 1200 358" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:monospace; font-size:12px }
#title { text-anchor:middle; font-size:17px; }
#matched { text-anchor:end; }
#search { text-anchor:end; opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = false;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = true;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames, known_font_width;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    known_font_width = get_monospace_width(frames);
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
            svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            update_text_for_elements(frames.children);

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad;
            matchedtxt.attributes.x.value = svgWidth - xpad;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function get_monospace_width(frames) {
    // Given the id="frames" element, return the width of text characters if
    // this is a monospace font, otherwise return 0.
    text = find_child(frames.children[0], "text");
    originalContent = text.textContent;
    text.textContent = "!";
    bangWidth = text.getComputedTextLength();
    text.textContent = "W";
    wWidth = text.getComputedTextLength();
    text.textContent = originalContent;
    if (bangWidth === wWidth) {
        return bangWidth;
    } else {
        return 0;
    }
}
function update_text_for_elements(elements) {
    // In order to render quickly in the browser, you want to do one pass of
    // reading attributes, and one pass of mutating attributes. See
    // https://web.dev/avoid-large-complex-layouts-and-layout-thrashing/ for details.

    // Fall back to inefficient calculation, if we're variable-width font.
    // TODO This should be optimized somehow too.
    if (known_font_width === 0) {
        for (var i = 0; i < elements.length; i++) {
            update_text(elements[i]);
        }
        return;
    }

    var textElemNewAttributes = [];
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var r = find_child(e, "rect");
        var t = find_child(e, "text");
        var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
        var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
        var newX = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

        // Smaller than this size won't fit anything
        if (w < 2 * known_font_width) {
            textElemNewAttributes.push([newX, ""]);
            continue;
        }

        // Fit in full text width
        if (txt.length * known_font_width < w) {
            textElemNewAttributes.push([newX, txt]);
            continue;
        }

        var substringLength = Math.floor(w / known_font_width) - 2;
        if (truncate_text_right) {
            // Truncate the right side of the text.
            textElemNewAttributes.push([newX, txt.substring(0, substringLength) + ".."]);
            continue;
        } else {
            // Truncate the left side of the text.
            textElemNewAttributes.push([newX, ".." + txt.substring(txt.length - substringLength, txt.length)]);
            continue;
        }
    }

    console.assert(textElemNewAttributes.length === elements.length, "Resize failed, please file a bug at https://github.com/jonhoo/inferno/");

    // Now that we know new textContent, set it all in one go so we don't refresh a bazillion times.
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var values = textElemNewAttributes[i];
        var t = find_child(e, "text");
        t.attributes.x.value = values[0];
        t.textContent = values[1];
    }
}

function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    var to_update_text = [];
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                to_update_text.push(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                to_update_text.push(e);
            }
        }
    }
    update_text_for_elements(to_update_text);
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
    }
    update_text_for_elements(el);
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="358" fill="url(#background)"/><text id="title" fill="rgb(0,0,0)" x="50.0000%" y="24.00">Flame Graph</text><text id="details" fill="rgb(0,0,0)" x="10" y="341.00"> </text><text id="unzoom" class="hide" fill="rgb(0,0,0)" x="10" y="24.00">Reset Zoom</text><text id="search" fill="rgb(0,0,0)" x="1190" y="24.00">Search</text><text id="matched" fill="rgb(0,0,0)" x="1190" y="341.00"> </text><svg id="frames" x="10" width="1180" total_samples="538498755107"><g><title>&lt;core::option::Option&lt;T&gt; as core::ops::try_trait::Try&gt;::branch (161,748,720 samples, 0.03%)</title><rect x="0.2113%" y="181" width="0.0300%" height="15" fill="rgb(227,0,7)" fg:x="1138082502" fg:w="161748720"/><text x="0.4613%" y="191.50"></text></g><g><title>&lt;core::iter::adapters::enumerate::Enumerate&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::next (701,892,681 samples, 0.13%)</title><rect x="0.2106%" y="197" width="0.1303%" height="15" fill="rgb(217,0,24)" fg:x="1134210987" fg:w="701892681"/><text x="0.4606%" y="207.50"></text></g><g><title>&lt;nalgebra::base::iter::MatrixIter&lt;T,R,C,S&gt; as core::iter::traits::iterator::Iterator&gt;::next (536,272,446 samples, 0.10%)</title><rect x="0.2414%" y="181" width="0.0996%" height="15" fill="rgb(221,193,54)" fg:x="1299831222" fg:w="536272446"/><text x="0.4914%" y="191.50"></text></g><g><title>&lt;nalgebra::base::iter::RawIter&lt;*const T,T,R,C,RStride,CStride&gt; as core::iter::traits::iterator::Iterator&gt;::next (536,272,446 samples, 0.10%)</title><rect x="0.2414%" y="165" width="0.0996%" height="15" fill="rgb(248,212,6)" fg:x="1299831222" fg:w="536272446"/><text x="0.4914%" y="175.50"></text></g><g><title>nalgebra::base::matrix::Matrix&lt;T,R,C,S&gt;::vector_to_matrix_index (170,066,252 samples, 0.03%)</title><rect x="0.8323%" y="133" width="0.0316%" height="15" fill="rgb(208,68,35)" fg:x="4481780708" fg:w="170066252"/><text x="1.0823%" y="143.50"></text></g><g><title>nalgebra::base::ops::&lt;impl core::ops::index::Index&lt;usize&gt; for nalgebra::base::matrix::Matrix&lt;T,R,C,S&gt;&gt;::index (482,521,870 samples, 0.09%)</title><rect x="0.8044%" y="149" width="0.0896%" height="15" fill="rgb(232,128,0)" fg:x="4331864771" fg:w="482521870"/><text x="1.0544%" y="159.50"></text></g><g><title>nalgebra::base::ops::&lt;impl core::ops::index::Index&lt;(usize,usize)&gt; for nalgebra::base::matrix::Matrix&lt;T,R,C,S&gt;&gt;::index (162,539,681 samples, 0.03%)</title><rect x="0.8639%" y="133" width="0.0302%" height="15" fill="rgb(207,160,47)" fg:x="4651846960" fg:w="162539681"/><text x="1.1139%" y="143.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (4,826,291,686 samples, 0.90%)</title><rect x="0.2106%" y="213" width="0.8962%" height="15" fill="rgb(228,23,34)" fg:x="1134210987" fg:w="4826291686"/><text x="0.4606%" y="223.50"></text></g><g><title>core::option::Option&lt;T&gt;::map (4,122,853,755 samples, 0.77%)</title><rect x="0.3413%" y="197" width="0.7656%" height="15" fill="rgb(218,30,26)" fg:x="1837648918" fg:w="4122853755"/><text x="0.5913%" y="207.50"></text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;mut F&gt;::call_once (4,121,303,777 samples, 0.77%)</title><rect x="0.3415%" y="181" width="0.7653%" height="15" fill="rgb(220,122,19)" fg:x="1839198896" fg:w="4121303777"/><text x="0.5915%" y="191.50"></text></g><g><title>number_recognition::neural_network::NN::backprop::{{closure}} (3,248,086,713 samples, 0.60%)</title><rect x="0.5037%" y="165" width="0.6032%" height="15" fill="rgb(250,228,42)" fg:x="2712415960" fg:w="3248086713"/><text x="0.7537%" y="175.50"></text></g><g><title>number_recognition::activation_functions::leaky_relu_derivative (1,146,116,032 samples, 0.21%)</title><rect x="0.8940%" y="149" width="0.2128%" height="15" fill="rgb(240,193,28)" fg:x="4814386641" fg:w="1146116032"/><text x="1.1440%" y="159.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialOrd for f32&gt;::lt (972,177,046 samples, 0.18%)</title><rect x="0.9263%" y="133" width="0.1805%" height="15" fill="rgb(216,20,37)" fg:x="4988325627" fg:w="972177046"/><text x="1.1763%" y="143.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_desugared (6,072,077,972 samples, 1.13%)</title><rect x="0.0060%" y="229" width="1.1276%" height="15" fill="rgb(206,188,39)" fg:x="32400212" fg:w="6072077972"/><text x="0.2560%" y="239.50"></text></g><g><title>core::ptr::write (142,426,500 samples, 0.03%)</title><rect x="1.1072%" y="213" width="0.0264%" height="15" fill="rgb(217,207,13)" fg:x="5962051684" fg:w="142426500"/><text x="1.3572%" y="223.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;T,I&gt;&gt;::spec_extend (6,073,629,729 samples, 1.13%)</title><rect x="0.0060%" y="245" width="1.1279%" height="15" fill="rgb(231,73,38)" fg:x="32400212" fg:w="6073629729"/><text x="0.2560%" y="255.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (116,135,051 samples, 0.02%)</title><rect x="1.1362%" y="165" width="0.0216%" height="15" fill="rgb(225,20,46)" fg:x="6118407973" fg:w="116135051"/><text x="1.3862%" y="175.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (116,135,051 samples, 0.02%)</title><rect x="1.1362%" y="149" width="0.0216%" height="15" fill="rgb(210,31,41)" fg:x="6118407973" fg:w="116135051"/><text x="1.3862%" y="159.50"></text></g><g><title>alloc::alloc::alloc (116,135,051 samples, 0.02%)</title><rect x="1.1362%" y="133" width="0.0216%" height="15" fill="rgb(221,200,47)" fg:x="6118407973" fg:w="116135051"/><text x="1.3862%" y="143.50"></text></g><g><title>malloc (104,547,730 samples, 0.02%)</title><rect x="1.1383%" y="117" width="0.0194%" height="15" fill="rgb(226,26,5)" fg:x="6129995294" fg:w="104547730"/><text x="1.3883%" y="127.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::with_capacity (116,911,793 samples, 0.02%)</title><rect x="1.1362%" y="245" width="0.0217%" height="15" fill="rgb(249,33,26)" fg:x="6118407973" fg:w="116911793"/><text x="1.3862%" y="255.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (116,911,793 samples, 0.02%)</title><rect x="1.1362%" y="229" width="0.0217%" height="15" fill="rgb(235,183,28)" fg:x="6118407973" fg:w="116911793"/><text x="1.3862%" y="239.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (116,911,793 samples, 0.02%)</title><rect x="1.1362%" y="213" width="0.0217%" height="15" fill="rgb(221,5,38)" fg:x="6118407973" fg:w="116911793"/><text x="1.3862%" y="223.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::with_capacity_in (116,911,793 samples, 0.02%)</title><rect x="1.1362%" y="197" width="0.0217%" height="15" fill="rgb(247,18,42)" fg:x="6118407973" fg:w="116911793"/><text x="1.3862%" y="207.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::try_allocate_in (116,911,793 samples, 0.02%)</title><rect x="1.1362%" y="181" width="0.0217%" height="15" fill="rgb(241,131,45)" fg:x="6118407973" fg:w="116911793"/><text x="1.3862%" y="191.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (6,236,865,515 samples, 1.16%)</title><rect x="0.0003%" y="277" width="1.1582%" height="15" fill="rgb(249,31,29)" fg:x="1547940" fg:w="6236865515"/><text x="0.2503%" y="287.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter_nested::SpecFromIterNested&lt;T,I&gt;&gt;::from_iter (6,226,798,391 samples, 1.16%)</title><rect x="0.0022%" y="261" width="1.1563%" height="15" fill="rgb(225,111,53)" fg:x="11615064" fg:w="6226798391"/><text x="0.2522%" y="271.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_desugared (203,223,385 samples, 0.04%)</title><rect x="1.1660%" y="213" width="0.0377%" height="15" fill="rgb(238,160,17)" fg:x="6279119207" fg:w="203223385"/><text x="1.4160%" y="223.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (157,024,801 samples, 0.03%)</title><rect x="1.1746%" y="197" width="0.0292%" height="15" fill="rgb(214,148,48)" fg:x="6325317791" fg:w="157024801"/><text x="1.4246%" y="207.50"></text></g><g><title>&lt;core::iter::adapters::enumerate::Enumerate&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::next (154,697,166 samples, 0.03%)</title><rect x="1.1751%" y="181" width="0.0287%" height="15" fill="rgb(232,36,49)" fg:x="6327645426" fg:w="154697166"/><text x="1.4251%" y="191.50"></text></g><g><title>&lt;nalgebra::base::iter::MatrixIter&lt;T,R,C,S&gt; as core::iter::traits::iterator::Iterator&gt;::next (154,697,166 samples, 0.03%)</title><rect x="1.1751%" y="165" width="0.0287%" height="15" fill="rgb(209,103,24)" fg:x="6327645426" fg:w="154697166"/><text x="1.4251%" y="175.50"></text></g><g><title>&lt;nalgebra::base::iter::RawIter&lt;*const T,T,R,C,RStride,CStride&gt; as core::iter::traits::iterator::Iterator&gt;::next (154,697,166 samples, 0.03%)</title><rect x="1.1751%" y="149" width="0.0287%" height="15" fill="rgb(229,88,8)" fg:x="6327645426" fg:w="154697166"/><text x="1.4251%" y="159.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;T,I&gt;&gt;::spec_extend (272,046,761 samples, 0.05%)</title><rect x="1.1660%" y="229" width="0.0505%" height="15" fill="rgb(213,181,19)" fg:x="6279119207" fg:w="272046761"/><text x="1.4160%" y="239.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_trusted (68,823,376 samples, 0.01%)</title><rect x="1.2038%" y="213" width="0.0128%" height="15" fill="rgb(254,191,54)" fg:x="6482342592" fg:w="68823376"/><text x="1.4538%" y="223.50"></text></g><g><title>core::iter::traits::iterator::Iterator::for_each (68,823,376 samples, 0.01%)</title><rect x="1.2038%" y="197" width="0.0128%" height="15" fill="rgb(241,83,37)" fg:x="6482342592" fg:w="68823376"/><text x="1.4538%" y="207.50"></text></g><g><title>&lt;core::iter::adapters::rev::Rev&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::fold (68,823,376 samples, 0.01%)</title><rect x="1.2038%" y="181" width="0.0128%" height="15" fill="rgb(233,36,39)" fg:x="6482342592" fg:w="68823376"/><text x="1.4538%" y="191.50"></text></g><g><title>core::iter::traits::double_ended::DoubleEndedIterator::rfold (68,823,376 samples, 0.01%)</title><rect x="1.2038%" y="165" width="0.0128%" height="15" fill="rgb(226,3,54)" fg:x="6482342592" fg:w="68823376"/><text x="1.4538%" y="175.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (371,044,650 samples, 0.07%)</title><rect x="1.1591%" y="261" width="0.0689%" height="15" fill="rgb(245,192,40)" fg:x="6242005525" fg:w="371044650"/><text x="1.4091%" y="271.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter_nested::SpecFromIterNested&lt;T,I&gt;&gt;::from_iter (364,883,535 samples, 0.07%)</title><rect x="1.1603%" y="245" width="0.0678%" height="15" fill="rgb(238,167,29)" fg:x="6248166640" fg:w="364883535"/><text x="1.4103%" y="255.50"></text></g><g><title>nalgebra::base::matrix::Matrix&lt;T,R,C,S&gt;::clone_owned (72,770,451 samples, 0.01%)</title><rect x="1.2282%" y="181" width="0.0135%" height="15" fill="rgb(232,182,51)" fg:x="6613824343" fg:w="72770451"/><text x="1.4782%" y="191.50"></text></g><g><title>&lt;nalgebra::base::vec_storage::VecStorage&lt;T,nalgebra::base::dimension::Dyn,C&gt; as nalgebra::base::storage::Storage&lt;T,nalgebra::base::dimension::Dyn,C&gt;&gt;::clone_owned (72,770,451 samples, 0.01%)</title><rect x="1.2282%" y="165" width="0.0135%" height="15" fill="rgb(231,60,39)" fg:x="6613824343" fg:w="72770451"/><text x="1.4782%" y="175.50"></text></g><g><title>&lt;nalgebra::base::vec_storage::VecStorage&lt;T,R,C&gt; as core::clone::Clone&gt;::clone (72,770,451 samples, 0.01%)</title><rect x="1.2282%" y="149" width="0.0135%" height="15" fill="rgb(208,69,12)" fg:x="6613824343" fg:w="72770451"/><text x="1.4782%" y="159.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (72,770,451 samples, 0.01%)</title><rect x="1.2282%" y="133" width="0.0135%" height="15" fill="rgb(235,93,37)" fg:x="6613824343" fg:w="72770451"/><text x="1.4782%" y="143.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (72,770,451 samples, 0.01%)</title><rect x="1.2282%" y="117" width="0.0135%" height="15" fill="rgb(213,116,39)" fg:x="6613824343" fg:w="72770451"/><text x="1.4782%" y="127.50"></text></g><g><title>&lt;T as alloc::slice::&lt;impl [T]&gt;::to_vec_in::ConvertVec&gt;::to_vec (72,770,451 samples, 0.01%)</title><rect x="1.2282%" y="101" width="0.0135%" height="15" fill="rgb(222,207,29)" fg:x="6613824343" fg:w="72770451"/><text x="1.4782%" y="111.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::copy_to_nonoverlapping (71,989,091 samples, 0.01%)</title><rect x="1.2283%" y="85" width="0.0134%" height="15" fill="rgb(206,96,30)" fg:x="6614605703" fg:w="71989091"/><text x="1.4783%" y="95.50"></text></g><g><title>core::ptr::copy_nonoverlapping (71,989,091 samples, 0.01%)</title><rect x="1.2283%" y="69" width="0.0134%" height="15" fill="rgb(218,138,4)" fg:x="6614605703" fg:w="71989091"/><text x="1.4783%" y="79.50"></text></g><g><title>__memmove_avx_unaligned_erms (71,989,091 samples, 0.01%)</title><rect x="1.2283%" y="53" width="0.0134%" height="15" fill="rgb(250,191,14)" fg:x="6614605703" fg:w="71989091"/><text x="1.4783%" y="63.50"></text></g><g><title>nalgebra::base::ops::&lt;impl core::ops::arith::Mul&lt;T&gt; for &amp;nalgebra::base::matrix::Matrix&lt;T,R,C,S&gt;&gt;::mul (134,714,826 samples, 0.03%)</title><rect x="1.2282%" y="197" width="0.0250%" height="15" fill="rgb(239,60,40)" fg:x="6613824343" fg:w="134714826"/><text x="1.4782%" y="207.50"></text></g><g><title>nalgebra::base::ops::&lt;impl core::ops::arith::Mul&lt;T&gt; for nalgebra::base::matrix::Matrix&lt;T,R,C,S&gt;&gt;::mul (61,944,375 samples, 0.01%)</title><rect x="1.2417%" y="181" width="0.0115%" height="15" fill="rgb(206,27,48)" fg:x="6686594794" fg:w="61944375"/><text x="1.4917%" y="191.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::fold (197,418,643 samples, 0.04%)</title><rect x="1.2281%" y="245" width="0.0367%" height="15" fill="rgb(225,35,8)" fg:x="6613050175" fg:w="197418643"/><text x="1.4781%" y="255.50"></text></g><g><title>core::iter::adapters::map::map_fold::{{closure}} (197,418,643 samples, 0.04%)</title><rect x="1.2281%" y="229" width="0.0367%" height="15" fill="rgb(250,213,24)" fg:x="6613050175" fg:w="197418643"/><text x="1.4781%" y="239.50"></text></g><g><title>number_recognition::optimisation_algos::Optimisation::calculate_change::{{closure}} (197,418,643 samples, 0.04%)</title><rect x="1.2281%" y="213" width="0.0367%" height="15" fill="rgb(247,123,22)" fg:x="6613050175" fg:w="197418643"/><text x="1.4781%" y="223.50"></text></g><g><title>nalgebra::base::ops::&lt;impl core::ops::arith::Mul&lt;T&gt; for nalgebra::base::matrix::Matrix&lt;T,R,C,S&gt;&gt;::mul (61,929,649 samples, 0.01%)</title><rect x="1.2532%" y="197" width="0.0115%" height="15" fill="rgb(231,138,38)" fg:x="6748539169" fg:w="61929649"/><text x="1.5032%" y="207.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (197,717,185 samples, 0.04%)</title><rect x="1.2281%" y="261" width="0.0367%" height="15" fill="rgb(231,145,46)" fg:x="6613050175" fg:w="197717185"/><text x="1.4781%" y="271.50"></text></g><g><title>_int_malloc (59,547,689 samples, 0.01%)</title><rect x="1.2958%" y="165" width="0.0111%" height="15" fill="rgb(251,118,11)" fg:x="6977944491" fg:w="59547689"/><text x="1.5458%" y="175.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::grow (131,491,184 samples, 0.02%)</title><rect x="1.2830%" y="245" width="0.0244%" height="15" fill="rgb(217,147,25)" fg:x="6909096798" fg:w="131491184"/><text x="1.5330%" y="255.50"></text></g><g><title>alloc::alloc::Global::grow_impl (131,491,184 samples, 0.02%)</title><rect x="1.2830%" y="229" width="0.0244%" height="15" fill="rgb(247,81,37)" fg:x="6909096798" fg:w="131491184"/><text x="1.5330%" y="239.50"></text></g><g><title>alloc::alloc::realloc (131,491,184 samples, 0.02%)</title><rect x="1.2830%" y="213" width="0.0244%" height="15" fill="rgb(209,12,38)" fg:x="6909096798" fg:w="131491184"/><text x="1.5330%" y="223.50"></text></g><g><title>realloc (122,229,130 samples, 0.02%)</title><rect x="1.2847%" y="197" width="0.0227%" height="15" fill="rgb(227,1,9)" fg:x="6918358852" fg:w="122229130"/><text x="1.5347%" y="207.50"></text></g><g><title>_int_realloc (105,198,793 samples, 0.02%)</title><rect x="1.2879%" y="181" width="0.0195%" height="15" fill="rgb(248,47,43)" fg:x="6935389189" fg:w="105198793"/><text x="1.5379%" y="191.50"></text></g><g><title>alloc::raw_vec::finish_grow (792,058,851 samples, 0.15%)</title><rect x="1.2751%" y="261" width="0.1471%" height="15" fill="rgb(221,10,30)" fg:x="6866239534" fg:w="792058851"/><text x="1.5251%" y="271.50"></text></g><g><title>malloc (597,605,924 samples, 0.11%)</title><rect x="1.3112%" y="245" width="0.1110%" height="15" fill="rgb(210,229,1)" fg:x="7060692461" fg:w="597605924"/><text x="1.5612%" y="255.50"></text></g><g><title>_int_malloc (462,162,179 samples, 0.09%)</title><rect x="1.3363%" y="229" width="0.0858%" height="15" fill="rgb(222,148,37)" fg:x="7196136206" fg:w="462162179"/><text x="1.5863%" y="239.50"></text></g><g><title>unlink_chunk.isra.0 (74,267,316 samples, 0.01%)</title><rect x="1.4084%" y="213" width="0.0138%" height="15" fill="rgb(234,67,33)" fg:x="7584031069" fg:w="74267316"/><text x="1.6584%" y="223.50"></text></g><g><title>core::iter::adapters::map::map_fold::{{closure}} (57,105,302 samples, 0.01%)</title><rect x="1.4224%" y="133" width="0.0106%" height="15" fill="rgb(247,98,35)" fg:x="7659715836" fg:w="57105302"/><text x="1.6724%" y="143.50"></text></g><g><title>alloc::vec::in_place_collect::&lt;impl alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt; for alloc::vec::Vec&lt;T&gt;&gt;::from_iter (66,965,348 samples, 0.01%)</title><rect x="1.4222%" y="261" width="0.0124%" height="15" fill="rgb(247,138,52)" fg:x="7658298385" fg:w="66965348"/><text x="1.6722%" y="271.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter_nested::SpecFromIterNested&lt;T,I&gt;&gt;::from_iter{{reify.shim}} (66,106,149 samples, 0.01%)</title><rect x="1.4223%" y="245" width="0.0123%" height="15" fill="rgb(213,79,30)" fg:x="7659157584" fg:w="66106149"/><text x="1.6723%" y="255.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter_nested::SpecFromIterNested&lt;T,I&gt;&gt;::from_iter (66,106,149 samples, 0.01%)</title><rect x="1.4223%" y="229" width="0.0123%" height="15" fill="rgb(246,177,23)" fg:x="7659157584" fg:w="66106149"/><text x="1.6723%" y="239.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;T,I&gt;&gt;::spec_extend (65,770,731 samples, 0.01%)</title><rect x="1.4224%" y="213" width="0.0122%" height="15" fill="rgb(230,62,27)" fg:x="7659493002" fg:w="65770731"/><text x="1.6724%" y="223.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_trusted (65,770,731 samples, 0.01%)</title><rect x="1.4224%" y="197" width="0.0122%" height="15" fill="rgb(216,154,8)" fg:x="7659493002" fg:w="65770731"/><text x="1.6724%" y="207.50"></text></g><g><title>core::iter::traits::iterator::Iterator::for_each (65,770,731 samples, 0.01%)</title><rect x="1.4224%" y="181" width="0.0122%" height="15" fill="rgb(244,35,45)" fg:x="7659493002" fg:w="65770731"/><text x="1.6724%" y="191.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (65,770,731 samples, 0.01%)</title><rect x="1.4224%" y="165" width="0.0122%" height="15" fill="rgb(251,115,12)" fg:x="7659493002" fg:w="65770731"/><text x="1.6724%" y="175.50"></text></g><g><title>&lt;alloc::vec::into_iter::IntoIter&lt;T,A&gt; as core::iter::traits::iterator::Iterator&gt;::fold (65,770,731 samples, 0.01%)</title><rect x="1.4224%" y="149" width="0.0122%" height="15" fill="rgb(240,54,50)" fg:x="7659493002" fg:w="65770731"/><text x="1.6724%" y="159.50"></text></g><g><title>nalgebra::base::construction::&lt;impl nalgebra::base::matrix::Matrix&lt;T,nalgebra::base::dimension::Dyn,C,&lt;nalgebra::base::default_allocator::DefaultAllocator as nalgebra::base::allocator::Allocator&lt;nalgebra::base::dimension::Dyn,C&gt;&gt;::Buffer&lt;T&gt;&gt;&gt;::from_iterator (76,434,659 samples, 0.01%)</title><rect x="1.4415%" y="245" width="0.0142%" height="15" fill="rgb(233,84,52)" fg:x="7762380122" fg:w="76434659"/><text x="1.6915%" y="255.50"></text></g><g><title>nalgebra::base::construction::&lt;impl nalgebra::base::matrix::Matrix&lt;T,R,C,&lt;nalgebra::base::default_allocator::DefaultAllocator as nalgebra::base::allocator::Allocator&lt;R,C&gt;&gt;::Buffer&lt;T&gt;&gt;&gt;::from_iterator_generic (76,434,659 samples, 0.01%)</title><rect x="1.4415%" y="229" width="0.0142%" height="15" fill="rgb(207,117,47)" fg:x="7762380122" fg:w="76434659"/><text x="1.6915%" y="239.50"></text></g><g><title>&lt;nalgebra::base::default_allocator::DefaultAllocator as nalgebra::base::allocator::Allocator&lt;nalgebra::base::dimension::Dyn,C&gt;&gt;::allocate_from_iterator (76,434,659 samples, 0.01%)</title><rect x="1.4415%" y="213" width="0.0142%" height="15" fill="rgb(249,43,39)" fg:x="7762380122" fg:w="76434659"/><text x="1.6915%" y="223.50"></text></g><g><title>core::iter::traits::iterator::Iterator::collect (74,898,683 samples, 0.01%)</title><rect x="1.4418%" y="197" width="0.0139%" height="15" fill="rgb(209,38,44)" fg:x="7763916098" fg:w="74898683"/><text x="1.6918%" y="207.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as core::iter::traits::collect::FromIterator&lt;T&gt;&gt;::from_iter (74,898,683 samples, 0.01%)</title><rect x="1.4418%" y="181" width="0.0139%" height="15" fill="rgb(236,212,23)" fg:x="7763916098" fg:w="74898683"/><text x="1.6918%" y="191.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (74,898,683 samples, 0.01%)</title><rect x="1.4418%" y="165" width="0.0139%" height="15" fill="rgb(242,79,21)" fg:x="7763916098" fg:w="74898683"/><text x="1.6918%" y="175.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter_nested::SpecFromIterNested&lt;T,I&gt;&gt;::from_iter (74,898,683 samples, 0.01%)</title><rect x="1.4418%" y="149" width="0.0139%" height="15" fill="rgb(211,96,35)" fg:x="7763916098" fg:w="74898683"/><text x="1.6918%" y="159.50"></text></g><g><title>number_recognition::activation_functions::softmax (145,040,953 samples, 0.03%)</title><rect x="1.4392%" y="261" width="0.0269%" height="15" fill="rgb(253,215,40)" fg:x="7750017582" fg:w="145040953"/><text x="1.6892%" y="271.50"></text></g><g><title>core::ptr::drop_in_place&lt;nalgebra::base::matrix::Matrix&lt;f32,nalgebra::base::dimension::Dyn,nalgebra::base::dimension::Const&lt;1_usize&gt;,nalgebra::base::vec_storage::VecStorage&lt;f32,nalgebra::base::dimension::Dyn,nalgebra::base::dimension::Const&lt;1_usize&gt;&gt;&gt;&gt; (101,114,920 samples, 0.02%)</title><rect x="1.5052%" y="245" width="0.0188%" height="15" fill="rgb(211,81,21)" fg:x="8105450341" fg:w="101114920"/><text x="1.7552%" y="255.50"></text></g><g><title>core::ptr::drop_in_place&lt;nalgebra::base::vec_storage::VecStorage&lt;f32,nalgebra::base::dimension::Dyn,nalgebra::base::dimension::Const&lt;1_usize&gt;&gt;&gt; (101,114,920 samples, 0.02%)</title><rect x="1.5052%" y="229" width="0.0188%" height="15" fill="rgb(208,190,38)" fg:x="8105450341" fg:w="101114920"/><text x="1.7552%" y="239.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;f32&gt;&gt; (101,114,920 samples, 0.02%)</title><rect x="1.5052%" y="213" width="0.0188%" height="15" fill="rgb(235,213,38)" fg:x="8105450341" fg:w="101114920"/><text x="1.7552%" y="223.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;f32&gt;&gt; (101,114,920 samples, 0.02%)</title><rect x="1.5052%" y="197" width="0.0188%" height="15" fill="rgb(237,122,38)" fg:x="8105450341" fg:w="101114920"/><text x="1.7552%" y="207.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (101,114,920 samples, 0.02%)</title><rect x="1.5052%" y="181" width="0.0188%" height="15" fill="rgb(244,218,35)" fg:x="8105450341" fg:w="101114920"/><text x="1.7552%" y="191.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::deallocate (98,016,121 samples, 0.02%)</title><rect x="1.5058%" y="165" width="0.0182%" height="15" fill="rgb(240,68,47)" fg:x="8108549140" fg:w="98016121"/><text x="1.7558%" y="175.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (98,016,121 samples, 0.02%)</title><rect x="1.5058%" y="149" width="0.0182%" height="15" fill="rgb(210,16,53)" fg:x="8108549140" fg:w="98016121"/><text x="1.7558%" y="159.50"></text></g><g><title>alloc::alloc::dealloc (98,016,121 samples, 0.02%)</title><rect x="1.5058%" y="133" width="0.0182%" height="15" fill="rgb(235,124,12)" fg:x="8108549140" fg:w="98016121"/><text x="1.7558%" y="143.50"></text></g><g><title>cfree@GLIBC_2.2.5 (89,515,336 samples, 0.02%)</title><rect x="1.5073%" y="117" width="0.0166%" height="15" fill="rgb(224,169,11)" fg:x="8117049925" fg:w="89515336"/><text x="1.7573%" y="127.50"></text></g><g><title>_int_free (58,615,519 samples, 0.01%)</title><rect x="1.5131%" y="101" width="0.0109%" height="15" fill="rgb(250,166,2)" fg:x="8147949742" fg:w="58615519"/><text x="1.7631%" y="111.50"></text></g><g><title>&lt;nalgebra::base::uninit::Uninit as nalgebra::base::uninit::InitStatus&lt;T&gt;&gt;::init (7,834,676,749 samples, 1.45%)</title><rect x="1.5395%" y="213" width="1.4549%" height="15" fill="rgb(242,216,29)" fg:x="8290112050" fg:w="7834676749"/><text x="1.7895%" y="223.50"></text></g><g><title>core::clone::impls::&lt;impl core::clone::Clone for f32&gt;::clone (38,818,741,428 samples, 7.21%)</title><rect x="2.9944%" y="213" width="7.2087%" height="15" fill="rgb(230,116,27)" fg:x="16124788799" fg:w="38818741428"/><text x="3.2444%" y="223.50">core::clon..</text></g><g><title>&lt;usize as core::iter::range::Step&gt;::forward_unchecked (842,724,925 samples, 0.16%)</title><rect x="10.4741%" y="181" width="0.1565%" height="15" fill="rgb(228,99,48)" fg:x="56402717782" fg:w="842724925"/><text x="10.7241%" y="191.50"></text></g><g><title>core::num::&lt;impl usize&gt;::unchecked_add (842,724,925 samples, 0.16%)</title><rect x="10.4741%" y="165" width="0.1565%" height="15" fill="rgb(253,11,6)" fg:x="56402717782" fg:w="842724925"/><text x="10.7241%" y="175.50"></text></g><g><title>nalgebra::base::matrix::Matrix&lt;T,R,C,S&gt;::transpose_to_uninit (50,237,615,782 samples, 9.33%)</title><rect x="1.5389%" y="229" width="9.3292%" height="15" fill="rgb(247,143,39)" fg:x="8287014524" fg:w="50237615782"/><text x="1.7889%" y="239.50">nalgebra::bas..</text></g><g><title>core::iter::range::&lt;impl core::iter::traits::iterator::Iterator for core::ops::range::Range&lt;A&gt;&gt;::next (3,581,100,079 samples, 0.67%)</title><rect x="10.2031%" y="213" width="0.6650%" height="15" fill="rgb(236,97,10)" fg:x="54943530227" fg:w="3581100079"/><text x="10.4531%" y="223.50"></text></g><g><title>&lt;core::ops::range::Range&lt;T&gt; as core::iter::range::RangeIteratorImpl&gt;::spec_next (3,581,100,079 samples, 0.67%)</title><rect x="10.2031%" y="197" width="0.6650%" height="15" fill="rgb(233,208,19)" fg:x="54943530227" fg:w="3581100079"/><text x="10.4531%" y="207.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialOrd for usize&gt;::lt (1,279,187,599 samples, 0.24%)</title><rect x="10.6306%" y="181" width="0.2375%" height="15" fill="rgb(216,164,2)" fg:x="57245442707" fg:w="1279187599"/><text x="10.8806%" y="191.50"></text></g><g><title>nalgebra::base::matrix::Matrix&lt;T,R,C,S&gt;::transpose (50,290,972,736 samples, 9.34%)</title><rect x="1.5293%" y="245" width="9.3391%" height="15" fill="rgb(220,129,5)" fg:x="8235201212" fg:w="50290972736"/><text x="1.7793%" y="255.50">nalgebra::bas..</text></g><g><title>core::clone::impls::&lt;impl core::clone::Clone for f32&gt;::clone (62,660,017 samples, 0.01%)</title><rect x="10.8833%" y="213" width="0.0116%" height="15" fill="rgb(242,17,10)" fg:x="58606653659" fg:w="62660017"/><text x="11.1333%" y="223.50"></text></g><g><title>nalgebra::base::ops::&lt;impl core::ops::arith::Add&lt;&amp;nalgebra::base::matrix::Matrix&lt;T,R2,C2,SB&gt;&gt; for nalgebra::base::matrix::Matrix&lt;T,R1,C1,SA&gt;&gt;::add (160,944,814 samples, 0.03%)</title><rect x="10.8684%" y="245" width="0.0299%" height="15" fill="rgb(242,107,0)" fg:x="58526173948" fg:w="160944814"/><text x="11.1184%" y="255.50"></text></g><g><title>nalgebra::base::ops::&lt;impl nalgebra::base::matrix::Matrix&lt;T,R1,C1,SA&gt;&gt;::add_assign_statically_unchecked (123,828,399 samples, 0.02%)</title><rect x="10.8753%" y="229" width="0.0230%" height="15" fill="rgb(251,28,31)" fg:x="58563290363" fg:w="123828399"/><text x="11.1253%" y="239.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (212,568,291 samples, 0.04%)</title><rect x="10.8987%" y="133" width="0.0395%" height="15" fill="rgb(233,223,10)" fg:x="58689439919" fg:w="212568291"/><text x="11.1487%" y="143.50"></text></g><g><title>alloc::alloc::dealloc (212,568,291 samples, 0.04%)</title><rect x="10.8987%" y="117" width="0.0395%" height="15" fill="rgb(215,21,27)" fg:x="58689439919" fg:w="212568291"/><text x="11.1487%" y="127.50"></text></g><g><title>cfree@GLIBC_2.2.5 (181,631,399 samples, 0.03%)</title><rect x="10.9045%" y="101" width="0.0337%" height="15" fill="rgb(232,23,21)" fg:x="58720376811" fg:w="181631399"/><text x="11.1545%" y="111.50"></text></g><g><title>_int_free_merge_chunk (74,915,027 samples, 0.01%)</title><rect x="10.9243%" y="85" width="0.0139%" height="15" fill="rgb(244,5,23)" fg:x="58827093183" fg:w="74915027"/><text x="11.1743%" y="95.50"></text></g><g><title>nalgebra::base::ops::&lt;impl core::ops::arith::Mul&lt;&amp;nalgebra::base::matrix::Matrix&lt;T,R2,C2,SB&gt;&gt; for nalgebra::base::matrix::Matrix&lt;T,R1,C1,SA&gt;&gt;::mul (216,435,503 samples, 0.04%)</title><rect x="10.8983%" y="245" width="0.0402%" height="15" fill="rgb(226,81,46)" fg:x="58687118762" fg:w="216435503"/><text x="11.1483%" y="255.50"></text></g><g><title>core::ptr::drop_in_place&lt;nalgebra::base::matrix::Matrix&lt;f32,nalgebra::base::dimension::Dyn,nalgebra::base::dimension::Dyn,nalgebra::base::vec_storage::VecStorage&lt;f32,nalgebra::base::dimension::Dyn,nalgebra::base::dimension::Dyn&gt;&gt;&gt; (214,114,346 samples, 0.04%)</title><rect x="10.8987%" y="229" width="0.0398%" height="15" fill="rgb(247,70,30)" fg:x="58689439919" fg:w="214114346"/><text x="11.1487%" y="239.50"></text></g><g><title>core::ptr::drop_in_place&lt;nalgebra::base::vec_storage::VecStorage&lt;f32,nalgebra::base::dimension::Dyn,nalgebra::base::dimension::Dyn&gt;&gt; (214,114,346 samples, 0.04%)</title><rect x="10.8987%" y="213" width="0.0398%" height="15" fill="rgb(212,68,19)" fg:x="58689439919" fg:w="214114346"/><text x="11.1487%" y="223.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;f32&gt;&gt; (214,114,346 samples, 0.04%)</title><rect x="10.8987%" y="197" width="0.0398%" height="15" fill="rgb(240,187,13)" fg:x="58689439919" fg:w="214114346"/><text x="11.1487%" y="207.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;f32&gt;&gt; (214,114,346 samples, 0.04%)</title><rect x="10.8987%" y="181" width="0.0398%" height="15" fill="rgb(223,113,26)" fg:x="58689439919" fg:w="214114346"/><text x="11.1487%" y="191.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (214,114,346 samples, 0.04%)</title><rect x="10.8987%" y="165" width="0.0398%" height="15" fill="rgb(206,192,2)" fg:x="58689439919" fg:w="214114346"/><text x="11.1487%" y="175.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::deallocate (214,114,346 samples, 0.04%)</title><rect x="10.8987%" y="149" width="0.0398%" height="15" fill="rgb(241,108,4)" fg:x="58689439919" fg:w="214114346"/><text x="11.1487%" y="159.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (242,839,870 samples, 0.05%)</title><rect x="10.9385%" y="133" width="0.0451%" height="15" fill="rgb(247,173,49)" fg:x="58903554265" fg:w="242839870"/><text x="11.1885%" y="143.50"></text></g><g><title>alloc::alloc::dealloc (242,839,870 samples, 0.05%)</title><rect x="10.9385%" y="117" width="0.0451%" height="15" fill="rgb(224,114,35)" fg:x="58903554265" fg:w="242839870"/><text x="11.1885%" y="127.50"></text></g><g><title>cfree@GLIBC_2.2.5 (197,231,657 samples, 0.04%)</title><rect x="10.9469%" y="101" width="0.0366%" height="15" fill="rgb(245,159,27)" fg:x="58949162478" fg:w="197231657"/><text x="11.1969%" y="111.50"></text></g><g><title>core::ptr::drop_in_place&lt;nalgebra::base::matrix::Matrix&lt;f32,nalgebra::base::dimension::Const&lt;1_usize&gt;,nalgebra::base::dimension::Dyn,nalgebra::base::vec_storage::VecStorage&lt;f32,nalgebra::base::dimension::Const&lt;1_usize&gt;,nalgebra::base::dimension::Dyn&gt;&gt;&gt; (260,644,226 samples, 0.05%)</title><rect x="10.9385%" y="229" width="0.0484%" height="15" fill="rgb(245,172,44)" fg:x="58903554265" fg:w="260644226"/><text x="11.1885%" y="239.50"></text></g><g><title>core::ptr::drop_in_place&lt;nalgebra::base::vec_storage::VecStorage&lt;f32,nalgebra::base::dimension::Const&lt;1_usize&gt;,nalgebra::base::dimension::Dyn&gt;&gt; (260,644,226 samples, 0.05%)</title><rect x="10.9385%" y="213" width="0.0484%" height="15" fill="rgb(236,23,11)" fg:x="58903554265" fg:w="260644226"/><text x="11.1885%" y="223.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;f32&gt;&gt; (260,644,226 samples, 0.05%)</title><rect x="10.9385%" y="197" width="0.0484%" height="15" fill="rgb(205,117,38)" fg:x="58903554265" fg:w="260644226"/><text x="11.1885%" y="207.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;f32&gt;&gt; (260,644,226 samples, 0.05%)</title><rect x="10.9385%" y="181" width="0.0484%" height="15" fill="rgb(237,72,25)" fg:x="58903554265" fg:w="260644226"/><text x="11.1885%" y="191.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (260,644,226 samples, 0.05%)</title><rect x="10.9385%" y="165" width="0.0484%" height="15" fill="rgb(244,70,9)" fg:x="58903554265" fg:w="260644226"/><text x="11.1885%" y="175.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::deallocate (260,644,226 samples, 0.05%)</title><rect x="10.9385%" y="149" width="0.0484%" height="15" fill="rgb(217,125,39)" fg:x="58903554265" fg:w="260644226"/><text x="11.1885%" y="159.50"></text></g><g><title>core::iter::range::&lt;impl core::iter::traits::iterator::Iterator for core::ops::range::Range&lt;A&gt;&gt;::next (217,307,242 samples, 0.04%)</title><rect x="11.0162%" y="197" width="0.0404%" height="15" fill="rgb(235,36,10)" fg:x="59322156885" fg:w="217307242"/><text x="11.2662%" y="207.50"></text></g><g><title>&lt;core::ops::range::Range&lt;T&gt; as core::iter::range::RangeIteratorImpl&gt;::spec_next (217,307,242 samples, 0.04%)</title><rect x="11.0162%" y="181" width="0.0404%" height="15" fill="rgb(251,123,47)" fg:x="59322156885" fg:w="217307242"/><text x="11.2662%" y="191.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialOrd for usize&gt;::lt (212,663,653 samples, 0.04%)</title><rect x="11.0171%" y="165" width="0.0395%" height="15" fill="rgb(221,13,13)" fg:x="59326800474" fg:w="212663653"/><text x="11.2671%" y="175.50"></text></g><g><title>core::clone::impls::&lt;impl core::clone::Clone for f32&gt;::clone (602,618,878 samples, 0.11%)</title><rect x="11.0566%" y="181" width="0.1119%" height="15" fill="rgb(238,131,9)" fg:x="59539464127" fg:w="602618878"/><text x="11.3066%" y="191.50"></text></g><g><title>&lt;f32 as core::ops::arith::Mul&gt;::mul (2,728,046,166 samples, 0.51%)</title><rect x="11.1734%" y="149" width="0.5066%" height="15" fill="rgb(211,50,8)" fg:x="60168363310" fg:w="2728046166"/><text x="11.4234%" y="159.50"></text></g><g><title>&lt;nalgebra::base::uninit::Uninit as nalgebra::base::uninit::InitStatus&lt;T&gt;&gt;::init (13,612,068,044 samples, 2.53%)</title><rect x="11.6800%" y="149" width="2.5278%" height="15" fill="rgb(245,182,24)" fg:x="62896409476" fg:w="13612068044"/><text x="11.9300%" y="159.50">&lt;n..</text></g><g><title>core::clone::impls::&lt;impl core::clone::Clone for f32&gt;::clone (9,040,308,773 samples, 1.68%)</title><rect x="14.2077%" y="149" width="1.6788%" height="15" fill="rgb(242,14,37)" fg:x="76508477520" fg:w="9040308773"/><text x="14.4577%" y="159.50"></text></g><g><title>&lt;usize as core::iter::range::Step&gt;::forward_unchecked (64,202,758 samples, 0.01%)</title><rect x="16.0399%" y="117" width="0.0119%" height="15" fill="rgb(246,228,12)" fg:x="86374802750" fg:w="64202758"/><text x="16.2899%" y="127.50"></text></g><g><title>core::num::&lt;impl usize&gt;::unchecked_add (64,202,758 samples, 0.01%)</title><rect x="16.0399%" y="101" width="0.0119%" height="15" fill="rgb(213,55,15)" fg:x="86374802750" fg:w="64202758"/><text x="16.2899%" y="111.50"></text></g><g><title>nalgebra::base::blas_uninit::gemm_uninit (27,278,657,580 samples, 5.07%)</title><rect x="10.9869%" y="213" width="5.0657%" height="15" fill="rgb(209,9,3)" fg:x="59164198491" fg:w="27278657580"/><text x="11.2369%" y="223.50">nalgeb..</text></g><g><title>nalgebra::base::blas_uninit::gemv_uninit (26,903,391,944 samples, 5.00%)</title><rect x="11.0566%" y="197" width="4.9960%" height="15" fill="rgb(230,59,30)" fg:x="59539464127" fg:w="26903391944"/><text x="11.3066%" y="207.50">nalgeb..</text></g><g><title>nalgebra::base::blas_uninit::axcpy_uninit (26,300,773,066 samples, 4.88%)</title><rect x="11.1685%" y="181" width="4.8841%" height="15" fill="rgb(209,121,21)" fg:x="60142083005" fg:w="26300773066"/><text x="11.4185%" y="191.50">nalgeb..</text></g><g><title>nalgebra::base::blas_uninit::array_axc (26,300,773,066 samples, 4.88%)</title><rect x="11.1685%" y="165" width="4.8841%" height="15" fill="rgb(220,109,13)" fg:x="60142083005" fg:w="26300773066"/><text x="11.4185%" y="175.50">nalgeb..</text></g><g><title>core::iter::range::&lt;impl core::iter::traits::iterator::Iterator for core::ops::range::Range&lt;A&gt;&gt;::next (894,069,778 samples, 0.17%)</title><rect x="15.8865%" y="149" width="0.1660%" height="15" fill="rgb(232,18,1)" fg:x="85548786293" fg:w="894069778"/><text x="16.1365%" y="159.50"></text></g><g><title>&lt;core::ops::range::Range&lt;T&gt; as core::iter::range::RangeIteratorImpl&gt;::spec_next (894,069,778 samples, 0.17%)</title><rect x="15.8865%" y="133" width="0.1660%" height="15" fill="rgb(215,41,42)" fg:x="85548786293" fg:w="894069778"/><text x="16.1365%" y="143.50"></text></g><g><title>number_recognition::neural_network::NN::backprop (78,562,515,359 samples, 14.59%)</title><rect x="1.4661%" y="261" width="14.5892%" height="15" fill="rgb(224,123,36)" fg:x="7895058535" fg:w="78562515359"/><text x="1.7161%" y="271.50">number_recognition::ne..</text></g><g><title>nalgebra::base::ops::&lt;impl core::ops::arith::Mul&lt;nalgebra::base::matrix::Matrix&lt;T,R2,C2,SB&gt;&gt; for &amp;nalgebra::base::matrix::Matrix&lt;T,R1,C1,SA&gt;&gt;::mul (27,554,019,629 samples, 5.12%)</title><rect x="10.9385%" y="245" width="5.1168%" height="15" fill="rgb(240,125,3)" fg:x="58903554265" fg:w="27554019629"/><text x="11.1885%" y="255.50">nalgeb..</text></g><g><title>nalgebra::base::ops::&lt;impl core::ops::arith::Mul&lt;&amp;nalgebra::base::matrix::Matrix&lt;T,R2,C2,SB&gt;&gt; for &amp;nalgebra::base::matrix::Matrix&lt;T,R1,C1,SA&gt;&gt;::mul (27,293,375,403 samples, 5.07%)</title><rect x="10.9869%" y="229" width="5.0684%" height="15" fill="rgb(205,98,50)" fg:x="59164198491" fg:w="27293375403"/><text x="11.2369%" y="239.50">nalgeb..</text></g><g><title>&lt;nalgebra::base::iter::MatrixIter&lt;T,R,C,S&gt; as core::iter::traits::iterator::Iterator&gt;::next (155,914,116,388 samples, 28.95%)</title><rect x="27.8379%" y="213" width="28.9535%" height="15" fill="rgb(205,185,37)" fg:x="149906672359" fg:w="155914116388"/><text x="28.0879%" y="223.50">&lt;nalgebra::base::iter::MatrixIter&lt;T,R,C,S&gt; as c..</text></g><g><title>&lt;nalgebra::base::iter::RawIter&lt;*const T,T,R,C,RStride,CStride&gt; as core::iter::traits::iterator::Iterator&gt;::next (155,914,116,388 samples, 28.95%)</title><rect x="27.8379%" y="197" width="28.9535%" height="15" fill="rgb(238,207,15)" fg:x="149906672359" fg:w="155914116388"/><text x="28.0879%" y="207.50">&lt;nalgebra::base::iter::RawIter&lt;*const T,T,R,C,R..</text></g><g><title>core::iter::traits::iterator::Iterator::any (311,442,624,744 samples, 57.84%)</title><rect x="16.0728%" y="245" width="57.8353%" height="15" fill="rgb(213,199,42)" fg:x="86551961816" fg:w="311442624744"/><text x="16.3228%" y="255.50">core::iter::traits::iterator::Iterator::any</text></g><g><title>core::iter::traits::iterator::Iterator::try_fold (311,442,624,744 samples, 57.84%)</title><rect x="16.0728%" y="229" width="57.8353%" height="15" fill="rgb(235,201,11)" fg:x="86551961816" fg:w="311442624744"/><text x="16.3228%" y="239.50">core::iter::traits::iterator::Iterator::try_fold</text></g><g><title>core::iter::traits::iterator::Iterator::any::check::{{closure}} (92,173,797,813 samples, 17.12%)</title><rect x="56.7914%" y="213" width="17.1168%" height="15" fill="rgb(207,46,11)" fg:x="305820788747" fg:w="92173797813"/><text x="57.0414%" y="223.50">core::iter::traits::iterato..</text></g><g><title>number_recognition::neural_network::NN::non_parallel_training::{{closure}} (92,173,797,813 samples, 17.12%)</title><rect x="56.7914%" y="197" width="17.1168%" height="15" fill="rgb(241,35,35)" fg:x="305820788747" fg:w="92173797813"/><text x="57.0414%" y="207.50">number_recognition::neural_..</text></g><g><title>core::f32::&lt;impl f32&gt;::is_nan (92,173,797,813 samples, 17.12%)</title><rect x="56.7914%" y="181" width="17.1168%" height="15" fill="rgb(243,32,47)" fg:x="305820788747" fg:w="92173797813"/><text x="57.0414%" y="191.50">core::f32::&lt;impl f32&gt;::is_n..</text></g><g><title>&lt;f32 as core::ops::arith::AddAssign&gt;::add_assign (33,269,906,114 samples, 6.18%)</title><rect x="73.9313%" y="117" width="6.1783%" height="15" fill="rgb(247,202,23)" fg:x="398119127168" fg:w="33269906114"/><text x="74.1813%" y="127.50">&lt;f32 as ..</text></g><g><title>core::clone::impls::&lt;impl core::clone::Clone for f32&gt;::clone (13,676,854,939 samples, 2.54%)</title><rect x="80.1096%" y="117" width="2.5398%" height="15" fill="rgb(219,102,11)" fg:x="431389033282" fg:w="13676854939"/><text x="80.3596%" y="127.50">co..</text></g><g><title>&lt;usize as core::iter::range::Step&gt;::forward_unchecked (3,333,619,300 samples, 0.62%)</title><rect x="82.6521%" y="85" width="0.6191%" height="15" fill="rgb(243,110,44)" fg:x="445080562253" fg:w="3333619300"/><text x="82.9021%" y="95.50"></text></g><g><title>core::num::&lt;impl usize&gt;::unchecked_add (3,333,619,300 samples, 0.62%)</title><rect x="82.6521%" y="69" width="0.6191%" height="15" fill="rgb(222,74,54)" fg:x="445080562253" fg:w="3333619300"/><text x="82.9021%" y="79.50"></text></g><g><title>core::iter::range::&lt;impl core::iter::traits::iterator::Iterator for core::ops::range::Range&lt;A&gt;&gt;::next (3,349,840,777 samples, 0.62%)</title><rect x="82.6494%" y="117" width="0.6221%" height="15" fill="rgb(216,99,12)" fg:x="445065888221" fg:w="3349840777"/><text x="82.8994%" y="127.50"></text></g><g><title>&lt;core::ops::range::Range&lt;T&gt; as core::iter::range::RangeIteratorImpl&gt;::spec_next (3,349,840,777 samples, 0.62%)</title><rect x="82.6494%" y="101" width="0.6221%" height="15" fill="rgb(226,22,26)" fg:x="445065888221" fg:w="3349840777"/><text x="82.8994%" y="111.50"></text></g><g><title>nalgebra::base::ops::&lt;impl core::ops::arith::AddAssign&lt;&amp;nalgebra::base::matrix::Matrix&lt;T,R2,C2,SB&gt;&gt; for nalgebra::base::matrix::Matrix&lt;T,R1,C1,SA&gt;&gt;::add_assign (50,352,257,336 samples, 9.35%)</title><rect x="73.9211%" y="149" width="9.3505%" height="15" fill="rgb(217,163,10)" fg:x="398064246913" fg:w="50352257336"/><text x="74.1711%" y="159.50">nalgebra::bas..</text></g><g><title>nalgebra::base::ops::&lt;impl nalgebra::base::matrix::Matrix&lt;T,R1,C1,SA&gt;&gt;::add_assign_statically_unchecked (50,352,257,336 samples, 9.35%)</title><rect x="73.9211%" y="133" width="9.3505%" height="15" fill="rgb(213,25,53)" fg:x="398064246913" fg:w="50352257336"/><text x="74.1711%" y="143.50">nalgebra::bas..</text></g><g><title>&lt;f32 as core::ops::arith::SubAssign&gt;::sub_assign (58,672,051 samples, 0.01%)</title><rect x="83.2716%" y="117" width="0.0109%" height="15" fill="rgb(252,105,26)" fg:x="448416504249" fg:w="58672051"/><text x="83.5216%" y="127.50"></text></g><g><title>core::iter::traits::iterator::Iterator::for_each (50,516,996,549 samples, 9.38%)</title><rect x="73.9082%" y="245" width="9.3811%" height="15" fill="rgb(220,39,43)" fg:x="397994586560" fg:w="50516996549"/><text x="74.1582%" y="255.50">core::iter::t..</text></g><g><title>&lt;core::iter::adapters::enumerate::Enumerate&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::fold (50,516,996,549 samples, 9.38%)</title><rect x="73.9082%" y="229" width="9.3811%" height="15" fill="rgb(229,68,48)" fg:x="397994586560" fg:w="50516996549"/><text x="74.1582%" y="239.50">&lt;core::iter::..</text></g><g><title>&lt;core::slice::iter::IterMut&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::fold (50,516,996,549 samples, 9.38%)</title><rect x="73.9082%" y="213" width="9.3811%" height="15" fill="rgb(252,8,32)" fg:x="397994586560" fg:w="50516996549"/><text x="74.1582%" y="223.50">&lt;core::slice:..</text></g><g><title>&lt;core::iter::adapters::enumerate::Enumerate&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::fold::enumerate::{{closure}} (50,479,816,772 samples, 9.37%)</title><rect x="73.9151%" y="197" width="9.3742%" height="15" fill="rgb(223,20,43)" fg:x="398031766337" fg:w="50479816772"/><text x="74.1651%" y="207.50">&lt;core::iter::..</text></g><g><title>core::iter::traits::iterator::Iterator::for_each::call::{{closure}} (50,478,266,462 samples, 9.37%)</title><rect x="73.9154%" y="181" width="9.3739%" height="15" fill="rgb(229,81,49)" fg:x="398033316647" fg:w="50478266462"/><text x="74.1654%" y="191.50">core::iter::t..</text></g><g><title>number_recognition::neural_network::NN::non_parallel_training::{{closure}} (50,478,266,462 samples, 9.37%)</title><rect x="73.9154%" y="165" width="9.3739%" height="15" fill="rgb(236,28,36)" fg:x="398033316647" fg:w="50478266462"/><text x="74.1654%" y="175.50">number_recogn..</text></g><g><title>nalgebra::base::ops::&lt;impl core::ops::arith::SubAssign&lt;&amp;nalgebra::base::matrix::Matrix&lt;T,R2,C2,SB&gt;&gt; for nalgebra::base::matrix::Matrix&lt;T,R1,C1,SA&gt;&gt;::sub_assign (95,078,860 samples, 0.02%)</title><rect x="83.2716%" y="149" width="0.0177%" height="15" fill="rgb(249,185,26)" fg:x="448416504249" fg:w="95078860"/><text x="83.5216%" y="159.50"></text></g><g><title>nalgebra::base::ops::&lt;impl nalgebra::base::matrix::Matrix&lt;T,R1,C1,SA&gt;&gt;::sub_assign_statically_unchecked (95,078,860 samples, 0.02%)</title><rect x="83.2716%" y="133" width="0.0177%" height="15" fill="rgb(249,174,33)" fg:x="448416504249" fg:w="95078860"/><text x="83.5216%" y="143.50"></text></g><g><title>_int_free (68,022,052 samples, 0.01%)</title><rect x="83.3065%" y="53" width="0.0126%" height="15" fill="rgb(233,201,37)" fg:x="448604360587" fg:w="68022052"/><text x="83.5565%" y="63.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (168,583,337 samples, 0.03%)</title><rect x="83.2936%" y="101" width="0.0313%" height="15" fill="rgb(221,78,26)" fg:x="448534762190" fg:w="168583337"/><text x="83.5436%" y="111.50"></text></g><g><title>alloc::alloc::dealloc (168,583,337 samples, 0.03%)</title><rect x="83.2936%" y="85" width="0.0313%" height="15" fill="rgb(250,127,30)" fg:x="448534762190" fg:w="168583337"/><text x="83.5436%" y="95.50"></text></g><g><title>cfree@GLIBC_2.2.5 (162,406,877 samples, 0.03%)</title><rect x="83.2947%" y="69" width="0.0302%" height="15" fill="rgb(230,49,44)" fg:x="448540938650" fg:w="162406877"/><text x="83.5447%" y="79.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (192,537,642 samples, 0.04%)</title><rect x="83.2893%" y="229" width="0.0358%" height="15" fill="rgb(229,67,23)" fg:x="448511583109" fg:w="192537642"/><text x="83.5393%" y="239.50"></text></g><g><title>core::ptr::drop_in_place&lt;[nalgebra::base::matrix::Matrix&lt;f32,nalgebra::base::dimension::Dyn,nalgebra::base::dimension::Const&lt;1_usize&gt;,nalgebra::base::vec_storage::VecStorage&lt;f32,nalgebra::base::dimension::Dyn,nalgebra::base::dimension::Const&lt;1_usize&gt;&gt;&gt;]&gt; (192,537,642 samples, 0.04%)</title><rect x="83.2893%" y="213" width="0.0358%" height="15" fill="rgb(249,83,47)" fg:x="448511583109" fg:w="192537642"/><text x="83.5393%" y="223.50"></text></g><g><title>core::ptr::drop_in_place&lt;nalgebra::base::matrix::Matrix&lt;f32,nalgebra::base::dimension::Dyn,nalgebra::base::dimension::Const&lt;1_usize&gt;,nalgebra::base::vec_storage::VecStorage&lt;f32,nalgebra::base::dimension::Dyn,nalgebra::base::dimension::Const&lt;1_usize&gt;&gt;&gt;&gt; (188,667,509 samples, 0.04%)</title><rect x="83.2900%" y="197" width="0.0350%" height="15" fill="rgb(215,43,3)" fg:x="448515453242" fg:w="188667509"/><text x="83.5400%" y="207.50"></text></g><g><title>core::ptr::drop_in_place&lt;nalgebra::base::vec_storage::VecStorage&lt;f32,nalgebra::base::dimension::Dyn,nalgebra::base::dimension::Const&lt;1_usize&gt;&gt;&gt; (188,667,509 samples, 0.04%)</title><rect x="83.2900%" y="181" width="0.0350%" height="15" fill="rgb(238,154,13)" fg:x="448515453242" fg:w="188667509"/><text x="83.5400%" y="191.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;f32&gt;&gt; (188,667,509 samples, 0.04%)</title><rect x="83.2900%" y="165" width="0.0350%" height="15" fill="rgb(219,56,2)" fg:x="448515453242" fg:w="188667509"/><text x="83.5400%" y="175.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;f32&gt;&gt; (188,667,509 samples, 0.04%)</title><rect x="83.2900%" y="149" width="0.0350%" height="15" fill="rgb(233,0,4)" fg:x="448515453242" fg:w="188667509"/><text x="83.5400%" y="159.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (188,667,509 samples, 0.04%)</title><rect x="83.2900%" y="133" width="0.0350%" height="15" fill="rgb(235,30,7)" fg:x="448515453242" fg:w="188667509"/><text x="83.5400%" y="143.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::deallocate (169,358,561 samples, 0.03%)</title><rect x="83.2936%" y="117" width="0.0315%" height="15" fill="rgb(250,79,13)" fg:x="448534762190" fg:w="169358561"/><text x="83.5436%" y="127.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;nalgebra::base::matrix::Matrix&lt;f32,nalgebra::base::dimension::Dyn,nalgebra::base::dimension::Const&lt;1_usize&gt;,nalgebra::base::vec_storage::VecStorage&lt;f32,nalgebra::base::dimension::Dyn,nalgebra::base::dimension::Const&lt;1_usize&gt;&gt;&gt;&gt;&gt; (212,659,745 samples, 0.04%)</title><rect x="83.2893%" y="245" width="0.0395%" height="15" fill="rgb(211,146,34)" fg:x="448511583109" fg:w="212659745"/><text x="83.5393%" y="255.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (272,337,246 samples, 0.05%)</title><rect x="83.3322%" y="101" width="0.0506%" height="15" fill="rgb(228,22,38)" fg:x="448742821330" fg:w="272337246"/><text x="83.5822%" y="111.50"></text></g><g><title>alloc::alloc::dealloc (272,337,246 samples, 0.05%)</title><rect x="83.3322%" y="85" width="0.0506%" height="15" fill="rgb(235,168,5)" fg:x="448742821330" fg:w="272337246"/><text x="83.5822%" y="95.50"></text></g><g><title>cfree@GLIBC_2.2.5 (250,676,536 samples, 0.05%)</title><rect x="83.3362%" y="69" width="0.0466%" height="15" fill="rgb(221,155,16)" fg:x="448764482040" fg:w="250676536"/><text x="83.5862%" y="79.50"></text></g><g><title>_int_free_merge_chunk (128,519,973 samples, 0.02%)</title><rect x="83.3589%" y="53" width="0.0239%" height="15" fill="rgb(215,215,53)" fg:x="448886638603" fg:w="128519973"/><text x="83.6089%" y="63.50"></text></g><g><title>_int_free_create_chunk (57,261,984 samples, 0.01%)</title><rect x="83.3721%" y="37" width="0.0106%" height="15" fill="rgb(223,4,10)" fg:x="448957896592" fg:w="57261984"/><text x="83.6221%" y="47.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (281,625,734 samples, 0.05%)</title><rect x="83.3306%" y="229" width="0.0523%" height="15" fill="rgb(234,103,6)" fg:x="448734307664" fg:w="281625734"/><text x="83.5806%" y="239.50"></text></g><g><title>core::ptr::drop_in_place&lt;[nalgebra::base::matrix::Matrix&lt;f32,nalgebra::base::dimension::Dyn,nalgebra::base::dimension::Dyn,nalgebra::base::vec_storage::VecStorage&lt;f32,nalgebra::base::dimension::Dyn,nalgebra::base::dimension::Dyn&gt;&gt;]&gt; (281,625,734 samples, 0.05%)</title><rect x="83.3306%" y="213" width="0.0523%" height="15" fill="rgb(227,97,0)" fg:x="448734307664" fg:w="281625734"/><text x="83.5806%" y="223.50"></text></g><g><title>core::ptr::drop_in_place&lt;nalgebra::base::matrix::Matrix&lt;f32,nalgebra::base::dimension::Dyn,nalgebra::base::dimension::Dyn,nalgebra::base::vec_storage::VecStorage&lt;f32,nalgebra::base::dimension::Dyn,nalgebra::base::dimension::Dyn&gt;&gt;&gt; (281,625,734 samples, 0.05%)</title><rect x="83.3306%" y="197" width="0.0523%" height="15" fill="rgb(234,150,53)" fg:x="448734307664" fg:w="281625734"/><text x="83.5806%" y="207.50"></text></g><g><title>core::ptr::drop_in_place&lt;nalgebra::base::vec_storage::VecStorage&lt;f32,nalgebra::base::dimension::Dyn,nalgebra::base::dimension::Dyn&gt;&gt; (281,625,734 samples, 0.05%)</title><rect x="83.3306%" y="181" width="0.0523%" height="15" fill="rgb(228,201,54)" fg:x="448734307664" fg:w="281625734"/><text x="83.5806%" y="191.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;f32&gt;&gt; (281,625,734 samples, 0.05%)</title><rect x="83.3306%" y="165" width="0.0523%" height="15" fill="rgb(222,22,37)" fg:x="448734307664" fg:w="281625734"/><text x="83.5806%" y="175.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;f32&gt;&gt; (281,625,734 samples, 0.05%)</title><rect x="83.3306%" y="149" width="0.0523%" height="15" fill="rgb(237,53,32)" fg:x="448734307664" fg:w="281625734"/><text x="83.5806%" y="159.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (281,625,734 samples, 0.05%)</title><rect x="83.3306%" y="133" width="0.0523%" height="15" fill="rgb(233,25,53)" fg:x="448734307664" fg:w="281625734"/><text x="83.5806%" y="143.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::deallocate (273,112,068 samples, 0.05%)</title><rect x="83.3322%" y="117" width="0.0507%" height="15" fill="rgb(210,40,34)" fg:x="448742821330" fg:w="273112068"/><text x="83.5822%" y="127.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;nalgebra::base::matrix::Matrix&lt;f32,nalgebra::base::dimension::Dyn,nalgebra::base::dimension::Dyn,nalgebra::base::vec_storage::VecStorage&lt;f32,nalgebra::base::dimension::Dyn,nalgebra::base::dimension::Dyn&gt;&gt;&gt;&gt; (307,163,898 samples, 0.06%)</title><rect x="83.3287%" y="245" width="0.0570%" height="15" fill="rgb(241,220,44)" fg:x="448724242854" fg:w="307163898"/><text x="83.5787%" y="255.50"></text></g><g><title>number_recognition::neural_network::NN::non_parallel_training (362,598,099,429 samples, 67.33%)</title><rect x="16.0608%" y="261" width="67.3350%" height="15" fill="rgb(235,28,35)" fg:x="86486979693" fg:w="362598099429"/><text x="16.3108%" y="271.50">number_recognition::neural_network::NN::non_parallel_training</text></g><g><title>[unknown] (442,876,032,005 samples, 82.24%)</title><rect x="1.1591%" y="277" width="82.2427%" height="15" fill="rgb(210,56,17)" fg:x="6242005525" fg:w="442876032005"/><text x="1.4091%" y="287.50">[unknown]</text></g><g><title>_int_malloc (211,851,629 samples, 0.04%)</title><rect x="83.4828%" y="181" width="0.0393%" height="15" fill="rgb(224,130,29)" fg:x="449553790053" fg:w="211851629"/><text x="83.7328%" y="191.50"></text></g><g><title>alloc::alloc::realloc (453,266,315 samples, 0.08%)</title><rect x="83.4411%" y="229" width="0.0842%" height="15" fill="rgb(235,212,8)" fg:x="449329391768" fg:w="453266315"/><text x="83.6911%" y="239.50"></text></g><g><title>realloc (447,068,259 samples, 0.08%)</title><rect x="83.4423%" y="213" width="0.0830%" height="15" fill="rgb(223,33,50)" fg:x="449335589824" fg:w="447068259"/><text x="83.6923%" y="223.50"></text></g><g><title>_int_realloc (358,101,280 samples, 0.07%)</title><rect x="83.4588%" y="197" width="0.0665%" height="15" fill="rgb(219,149,13)" fg:x="449424556803" fg:w="358101280"/><text x="83.7088%" y="207.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::grow (454,040,259 samples, 0.08%)</title><rect x="83.4411%" y="261" width="0.0843%" height="15" fill="rgb(250,156,29)" fg:x="449329391768" fg:w="454040259"/><text x="83.6911%" y="271.50"></text></g><g><title>alloc::alloc::Global::grow_impl (454,040,259 samples, 0.08%)</title><rect x="83.4411%" y="245" width="0.0843%" height="15" fill="rgb(216,193,19)" fg:x="449329391768" fg:w="454040259"/><text x="83.6911%" y="255.50"></text></g><g><title>malloc (341,561,246 samples, 0.06%)</title><rect x="83.5302%" y="261" width="0.0634%" height="15" fill="rgb(216,135,14)" fg:x="449809253415" fg:w="341561246"/><text x="83.7802%" y="271.50"></text></g><g><title>alloc::raw_vec::finish_grow (869,753,093 samples, 0.16%)</title><rect x="83.4323%" y="277" width="0.1615%" height="15" fill="rgb(241,47,5)" fg:x="449281836776" fg:w="869753093"/><text x="83.6823%" y="287.50"></text></g><g><title>core::iter::range::&lt;impl core::iter::traits::iterator::Iterator for core::ops::range::Range&lt;A&gt;&gt;::next (913,299,598 samples, 0.17%)</title><rect x="83.6231%" y="229" width="0.1696%" height="15" fill="rgb(233,42,35)" fg:x="450309250252" fg:w="913299598"/><text x="83.8731%" y="239.50"></text></g><g><title>&lt;core::ops::range::Range&lt;T&gt; as core::iter::range::RangeIteratorImpl&gt;::spec_next (913,299,598 samples, 0.17%)</title><rect x="83.6231%" y="213" width="0.1696%" height="15" fill="rgb(231,13,6)" fg:x="450309250252" fg:w="913299598"/><text x="83.8731%" y="223.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialOrd for usize&gt;::lt (776,302,405 samples, 0.14%)</title><rect x="83.6485%" y="197" width="0.1442%" height="15" fill="rgb(207,181,40)" fg:x="450446247445" fg:w="776302405"/><text x="83.8985%" y="207.50"></text></g><g><title>&lt;nalgebra::base::uninit::Uninit as nalgebra::base::uninit::InitStatus&lt;T&gt;&gt;::init (54,929,657 samples, 0.01%)</title><rect x="83.7991%" y="197" width="0.0102%" height="15" fill="rgb(254,173,49)" fg:x="451257356290" fg:w="54929657"/><text x="84.0491%" y="207.50"></text></g><g><title>core::clone::impls::&lt;impl core::clone::Clone for f32&gt;::clone (129,138,159 samples, 0.02%)</title><rect x="83.8093%" y="197" width="0.0240%" height="15" fill="rgb(221,1,38)" fg:x="451312285947" fg:w="129138159"/><text x="84.0593%" y="207.50"></text></g><g><title>nalgebra::base::blas_uninit::array_axc (232,822,401 samples, 0.04%)</title><rect x="83.7927%" y="213" width="0.0432%" height="15" fill="rgb(206,124,46)" fg:x="451222549850" fg:w="232822401"/><text x="84.0427%" y="223.50"></text></g><g><title>&lt;f32 as core::ops::arith::Add&gt;::add (24,026,122,933 samples, 4.46%)</title><rect x="87.8667%" y="197" width="4.4617%" height="15" fill="rgb(249,21,11)" fg:x="473161003868" fg:w="24026122933"/><text x="88.1167%" y="207.50">&lt;f32 ..</text></g><g><title>&lt;f32 as core::ops::arith::Mul&gt;::mul (4,149,986,329 samples, 0.77%)</title><rect x="92.3284%" y="197" width="0.7707%" height="15" fill="rgb(222,201,40)" fg:x="497187126801" fg:w="4149986329"/><text x="92.5784%" y="207.50"></text></g><g><title>core::clone::impls::&lt;impl core::clone::Clone for f32&gt;::clone (32,695,152,214 samples, 6.07%)</title><rect x="93.0990%" y="197" width="6.0715%" height="15" fill="rgb(235,61,29)" fg:x="501337113130" fg:w="32695152214"/><text x="93.3490%" y="207.50">core::cl..</text></g><g><title>&lt;usize as core::iter::range::Step&gt;::forward_unchecked (141,664,065 samples, 0.03%)</title><rect x="99.5157%" y="165" width="0.0263%" height="15" fill="rgb(219,207,3)" fg:x="535890806139" fg:w="141664065"/><text x="99.7657%" y="175.50"></text></g><g><title>core::num::&lt;impl usize&gt;::unchecked_add (141,664,065 samples, 0.03%)</title><rect x="99.5157%" y="149" width="0.0263%" height="15" fill="rgb(222,56,46)" fg:x="535890806139" fg:w="141664065"/><text x="99.7657%" y="159.50"></text></g><g><title>nalgebra::base::blas_uninit::gemm_uninit (85,772,681,037 samples, 15.93%)</title><rect x="83.6175%" y="261" width="15.9281%" height="15" fill="rgb(239,76,54)" fg:x="450279154946" fg:w="85772681037"/><text x="83.8675%" y="271.50">nalgebra::base::blas_uni..</text></g><g><title>nalgebra::base::blas_uninit::gemv_uninit (85,772,681,037 samples, 15.93%)</title><rect x="83.6175%" y="245" width="15.9281%" height="15" fill="rgb(231,124,27)" fg:x="450279154946" fg:w="85772681037"/><text x="83.8675%" y="255.50">nalgebra::base::blas_uni..</text></g><g><title>nalgebra::base::blas_uninit::axcpy_uninit (84,829,286,133 samples, 15.75%)</title><rect x="83.7927%" y="229" width="15.7529%" height="15" fill="rgb(249,195,6)" fg:x="451222549850" fg:w="84829286133"/><text x="84.0427%" y="239.50">nalgebra::base::blas_uni..</text></g><g><title>nalgebra::base::blas_uninit::array_axcpy (84,596,463,732 samples, 15.71%)</title><rect x="83.8359%" y="213" width="15.7097%" height="15" fill="rgb(237,174,47)" fg:x="451455372251" fg:w="84596463732"/><text x="84.0859%" y="223.50">nalgebra::base::blas_uni..</text></g><g><title>core::iter::range::&lt;impl core::iter::traits::iterator::Iterator for core::ops::range::Range&lt;A&gt;&gt;::next (2,019,570,639 samples, 0.38%)</title><rect x="99.1706%" y="197" width="0.3750%" height="15" fill="rgb(206,201,31)" fg:x="534032265344" fg:w="2019570639"/><text x="99.4206%" y="207.50"></text></g><g><title>&lt;core::ops::range::Range&lt;T&gt; as core::iter::range::RangeIteratorImpl&gt;::spec_next (2,019,570,639 samples, 0.38%)</title><rect x="99.1706%" y="181" width="0.3750%" height="15" fill="rgb(231,57,52)" fg:x="534032265344" fg:w="2019570639"/><text x="99.4206%" y="191.50"></text></g><g><title>nalgebra::base::ops::&lt;impl core::ops::arith::Mul&lt;&amp;nalgebra::base::matrix::Matrix&lt;T,R2,C2,SB&gt;&gt; for &amp;nalgebra::base::matrix::Matrix&lt;T,R1,C1,SA&gt;&gt;::mul (85,902,667,637 samples, 15.95%)</title><rect x="83.6105%" y="277" width="15.9522%" height="15" fill="rgb(248,177,22)" fg:x="450241275304" fg:w="85902667637"/><text x="83.8605%" y="287.50">nalgebra::base::ops::&lt;imp..</text></g><g><title>nalgebra::base::ops::&lt;impl core::ops::arith::Sub&lt;&amp;nalgebra::base::matrix::Matrix&lt;T,R2,C2,SB&gt;&gt; for &amp;nalgebra::base::matrix::Matrix&lt;T,R1,C1,SA&gt;&gt;::sub (62,606,753 samples, 0.01%)</title><rect x="99.5627%" y="277" width="0.0116%" height="15" fill="rgb(215,211,37)" fg:x="536143942941" fg:w="62606753"/><text x="99.8127%" y="287.50"></text></g><g><title>nalgebra::base::ops::&lt;impl nalgebra::base::matrix::Matrix&lt;T,R1,C1,SA&gt;&gt;::sub_to_statically_unchecked_uninit (56,432,864 samples, 0.01%)</title><rect x="99.5639%" y="261" width="0.0105%" height="15" fill="rgb(241,128,51)" fg:x="536150116830" fg:w="56432864"/><text x="99.8139%" y="271.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (119,085,713 samples, 0.02%)</title><rect x="99.5919%" y="117" width="0.0221%" height="15" fill="rgb(227,165,31)" fg:x="536301319371" fg:w="119085713"/><text x="99.8419%" y="127.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (119,085,713 samples, 0.02%)</title><rect x="99.5919%" y="101" width="0.0221%" height="15" fill="rgb(228,167,24)" fg:x="536301319371" fg:w="119085713"/><text x="99.8419%" y="111.50"></text></g><g><title>alloc::alloc::alloc (119,085,713 samples, 0.02%)</title><rect x="99.5919%" y="85" width="0.0221%" height="15" fill="rgb(228,143,12)" fg:x="536301319371" fg:w="119085713"/><text x="99.8419%" y="95.50"></text></g><g><title>malloc (119,085,713 samples, 0.02%)</title><rect x="99.5919%" y="69" width="0.0221%" height="15" fill="rgb(249,149,8)" fg:x="536301319371" fg:w="119085713"/><text x="99.8419%" y="79.50"></text></g><g><title>_int_malloc (114,458,833 samples, 0.02%)</title><rect x="99.5928%" y="53" width="0.0213%" height="15" fill="rgb(243,35,44)" fg:x="536305946251" fg:w="114458833"/><text x="99.8428%" y="63.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (122,186,107 samples, 0.02%)</title><rect x="99.5919%" y="181" width="0.0227%" height="15" fill="rgb(246,89,9)" fg:x="536301319371" fg:w="122186107"/><text x="99.8419%" y="191.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (122,186,107 samples, 0.02%)</title><rect x="99.5919%" y="165" width="0.0227%" height="15" fill="rgb(233,213,13)" fg:x="536301319371" fg:w="122186107"/><text x="99.8419%" y="175.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::with_capacity_in (122,186,107 samples, 0.02%)</title><rect x="99.5919%" y="149" width="0.0227%" height="15" fill="rgb(233,141,41)" fg:x="536301319371" fg:w="122186107"/><text x="99.8419%" y="159.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::try_allocate_in (122,186,107 samples, 0.02%)</title><rect x="99.5919%" y="133" width="0.0227%" height="15" fill="rgb(239,167,4)" fg:x="536301319371" fg:w="122186107"/><text x="99.8419%" y="143.50"></text></g><g><title>&lt;nalgebra::base::matrix::Matrix&lt;T,R,C,S&gt; as core::clone::Clone&gt;::clone (405,347,024 samples, 0.08%)</title><rect x="99.5868%" y="261" width="0.0753%" height="15" fill="rgb(209,217,16)" fg:x="536273501046" fg:w="405347024"/><text x="99.8368%" y="271.50"></text></g><g><title>&lt;nalgebra::base::vec_storage::VecStorage&lt;T,R,C&gt; as core::clone::Clone&gt;::clone (405,347,024 samples, 0.08%)</title><rect x="99.5868%" y="245" width="0.0753%" height="15" fill="rgb(219,88,35)" fg:x="536273501046" fg:w="405347024"/><text x="99.8368%" y="255.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (405,347,024 samples, 0.08%)</title><rect x="99.5868%" y="229" width="0.0753%" height="15" fill="rgb(220,193,23)" fg:x="536273501046" fg:w="405347024"/><text x="99.8368%" y="239.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (377,528,699 samples, 0.07%)</title><rect x="99.5919%" y="213" width="0.0701%" height="15" fill="rgb(230,90,52)" fg:x="536301319371" fg:w="377528699"/><text x="99.8419%" y="223.50"></text></g><g><title>&lt;T as alloc::slice::&lt;impl [T]&gt;::to_vec_in::ConvertVec&gt;::to_vec (377,528,699 samples, 0.07%)</title><rect x="99.5919%" y="197" width="0.0701%" height="15" fill="rgb(252,106,19)" fg:x="536301319371" fg:w="377528699"/><text x="99.8419%" y="207.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::copy_to_nonoverlapping (255,342,592 samples, 0.05%)</title><rect x="99.6146%" y="181" width="0.0474%" height="15" fill="rgb(206,74,20)" fg:x="536423505478" fg:w="255342592"/><text x="99.8646%" y="191.50"></text></g><g><title>core::ptr::copy_nonoverlapping (255,342,592 samples, 0.05%)</title><rect x="99.6146%" y="165" width="0.0474%" height="15" fill="rgb(230,138,44)" fg:x="536423505478" fg:w="255342592"/><text x="99.8646%" y="175.50"></text></g><g><title>__memmove_avx_unaligned_erms (243,752,956 samples, 0.05%)</title><rect x="99.6168%" y="149" width="0.0453%" height="15" fill="rgb(235,182,43)" fg:x="536435095114" fg:w="243752956"/><text x="99.8668%" y="159.50"></text></g><g><title>nalgebra::base::matrix::Matrix&lt;T,R,C,S&gt;::map (74,287,310 samples, 0.01%)</title><rect x="99.6781%" y="261" width="0.0138%" height="15" fill="rgb(242,16,51)" fg:x="536765481748" fg:w="74287310"/><text x="99.9281%" y="271.50"></text></g><g><title>&lt;f32 as core::ops::arith::AddAssign&gt;::add_assign (59,436,849 samples, 0.01%)</title><rect x="99.6992%" y="229" width="0.0110%" height="15" fill="rgb(248,9,4)" fg:x="536879196011" fg:w="59436849"/><text x="99.9492%" y="239.50"></text></g><g><title>core::clone::impls::&lt;impl core::clone::Clone for f32&gt;::clone (71,102,373 samples, 0.01%)</title><rect x="99.7103%" y="229" width="0.0132%" height="15" fill="rgb(210,31,22)" fg:x="536938632860" fg:w="71102373"/><text x="99.9603%" y="239.50"></text></g><g><title>number_recognition::neural_network::NN::forward_pass (780,424,494 samples, 0.14%)</title><rect x="99.5813%" y="277" width="0.1449%" height="15" fill="rgb(239,54,39)" fg:x="536244066486" fg:w="780424494"/><text x="99.8313%" y="287.50"></text></g><g><title>nalgebra::base::ops::&lt;impl core::ops::arith::Add&lt;&amp;nalgebra::base::matrix::Matrix&lt;T,R2,C2,SB&gt;&gt; for nalgebra::base::matrix::Matrix&lt;T,R1,C1,SA&gt;&gt;::add (184,721,922 samples, 0.03%)</title><rect x="99.6919%" y="261" width="0.0343%" height="15" fill="rgb(230,99,41)" fg:x="536839769058" fg:w="184721922"/><text x="99.9419%" y="271.50"></text></g><g><title>nalgebra::base::ops::&lt;impl nalgebra::base::matrix::Matrix&lt;T,R1,C1,SA&gt;&gt;::add_assign_statically_unchecked (145,294,969 samples, 0.03%)</title><rect x="99.6992%" y="245" width="0.0270%" height="15" fill="rgb(253,106,12)" fg:x="536879196011" fg:w="145294969"/><text x="99.9492%" y="255.50"></text></g><g><title>&lt;nalgebra::base::iter::MatrixIter&lt;T,R,C,S&gt; as core::iter::traits::iterator::Iterator&gt;::next (644,285,015 samples, 0.12%)</title><rect x="99.7717%" y="229" width="0.1196%" height="15" fill="rgb(213,46,41)" fg:x="537269299968" fg:w="644285015"/><text x="100.0217%" y="239.50"></text></g><g><title>&lt;nalgebra::base::iter::RawIter&lt;*const T,T,R,C,RStride,CStride&gt; as core::iter::traits::iterator::Iterator&gt;::next (644,285,015 samples, 0.12%)</title><rect x="99.7717%" y="213" width="0.1196%" height="15" fill="rgb(215,133,35)" fg:x="537269299968" fg:w="644285015"/><text x="100.0217%" y="223.50"></text></g><g><title>core::iter::traits::iterator::Iterator::any (1,251,899,060 samples, 0.23%)</title><rect x="99.7264%" y="261" width="0.2325%" height="15" fill="rgb(213,28,5)" fg:x="537025260912" fg:w="1251899060"/><text x="99.9764%" y="271.50"></text></g><g><title>core::iter::traits::iterator::Iterator::try_fold (1,251,899,060 samples, 0.23%)</title><rect x="99.7264%" y="245" width="0.2325%" height="15" fill="rgb(215,77,49)" fg:x="537025260912" fg:w="1251899060"/><text x="99.9764%" y="255.50"></text></g><g><title>core::iter::traits::iterator::Iterator::any::check::{{closure}} (363,574,989 samples, 0.07%)</title><rect x="99.8913%" y="229" width="0.0675%" height="15" fill="rgb(248,100,22)" fg:x="537913584983" fg:w="363574989"/><text x="100.1413%" y="239.50"></text></g><g><title>number_recognition::neural_network::NN::non_parallel_training::{{closure}} (363,574,989 samples, 0.07%)</title><rect x="99.8913%" y="213" width="0.0675%" height="15" fill="rgb(208,67,9)" fg:x="537913584983" fg:w="363574989"/><text x="100.1413%" y="223.50"></text></g><g><title>core::f32::&lt;impl f32&gt;::is_nan (363,574,989 samples, 0.07%)</title><rect x="99.8913%" y="197" width="0.0675%" height="15" fill="rgb(219,133,21)" fg:x="537913584983" fg:w="363574989"/><text x="100.1413%" y="207.50"></text></g><g><title>&lt;f32 as core::ops::arith::AddAssign&gt;::add_assign (132,401,066 samples, 0.02%)</title><rect x="99.9590%" y="133" width="0.0246%" height="15" fill="rgb(246,46,29)" fg:x="538277934445" fg:w="132401066"/><text x="100.2090%" y="143.50"></text></g><g><title>core::clone::impls::&lt;impl core::clone::Clone for f32&gt;::clone (58,033,472 samples, 0.01%)</title><rect x="99.9836%" y="133" width="0.0108%" height="15" fill="rgb(246,185,52)" fg:x="538410335511" fg:w="58033472"/><text x="100.2336%" y="143.50"></text></g><g><title>nalgebra::base::ops::&lt;impl core::ops::arith::AddAssign&lt;&amp;nalgebra::base::matrix::Matrix&lt;T,R2,C2,SB&gt;&gt; for nalgebra::base::matrix::Matrix&lt;T,R1,C1,SA&gt;&gt;::add_assign (205,144,590 samples, 0.04%)</title><rect x="99.9590%" y="165" width="0.0381%" height="15" fill="rgb(252,136,11)" fg:x="538277934445" fg:w="205144590"/><text x="100.2090%" y="175.50"></text></g><g><title>nalgebra::base::ops::&lt;impl nalgebra::base::matrix::Matrix&lt;T,R1,C1,SA&gt;&gt;::add_assign_statically_unchecked (205,144,590 samples, 0.04%)</title><rect x="99.9590%" y="149" width="0.0381%" height="15" fill="rgb(219,138,53)" fg:x="538277934445" fg:w="205144590"/><text x="100.2090%" y="159.50"></text></g><g><title>core::iter::traits::iterator::Iterator::for_each (206,692,390 samples, 0.04%)</title><rect x="99.9588%" y="261" width="0.0384%" height="15" fill="rgb(211,51,23)" fg:x="538277159972" fg:w="206692390"/><text x="100.2088%" y="271.50"></text></g><g><title>&lt;core::iter::adapters::enumerate::Enumerate&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::fold (206,692,390 samples, 0.04%)</title><rect x="99.9588%" y="245" width="0.0384%" height="15" fill="rgb(247,221,28)" fg:x="538277159972" fg:w="206692390"/><text x="100.2088%" y="255.50"></text></g><g><title>&lt;core::slice::iter::IterMut&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::fold (206,692,390 samples, 0.04%)</title><rect x="99.9588%" y="229" width="0.0384%" height="15" fill="rgb(251,222,45)" fg:x="538277159972" fg:w="206692390"/><text x="100.2088%" y="239.50"></text></g><g><title>&lt;core::iter::adapters::enumerate::Enumerate&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::fold::enumerate::{{closure}} (206,692,390 samples, 0.04%)</title><rect x="99.9588%" y="213" width="0.0384%" height="15" fill="rgb(217,162,53)" fg:x="538277159972" fg:w="206692390"/><text x="100.2088%" y="223.50"></text></g><g><title>core::iter::traits::iterator::Iterator::for_each::call::{{closure}} (206,692,390 samples, 0.04%)</title><rect x="99.9588%" y="197" width="0.0384%" height="15" fill="rgb(229,93,14)" fg:x="538277159972" fg:w="206692390"/><text x="100.2088%" y="207.50"></text></g><g><title>number_recognition::neural_network::NN::non_parallel_training::{{closure}} (206,692,390 samples, 0.04%)</title><rect x="99.9588%" y="181" width="0.0384%" height="15" fill="rgb(209,67,49)" fg:x="538277159972" fg:w="206692390"/><text x="100.2088%" y="191.50"></text></g><g><title>number_recognition::neural_network::NN::non_parallel_training (1,463,236,200 samples, 0.27%)</title><rect x="99.7262%" y="277" width="0.2717%" height="15" fill="rgb(213,87,29)" fg:x="537024490980" fg:w="1463236200"/><text x="99.9762%" y="287.50"></text></g><g><title>all (538,498,755,107 samples, 100%)</title><rect x="0.0000%" y="309" width="100.0000%" height="15" fill="rgb(205,151,52)" fg:x="0" fg:w="538498755107"/><text x="0.2500%" y="319.50"></text></g><g><title>number_recognit (538,498,755,107 samples, 100.00%)</title><rect x="0.0000%" y="293" width="100.0000%" height="15" fill="rgb(253,215,39)" fg:x="0" fg:w="538498755107"/><text x="0.2500%" y="303.50">number_recognit</text></g></svg></svg>