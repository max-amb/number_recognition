<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="390" onload="init(evt)" viewBox="0 0 1200 390" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:monospace; font-size:12px }
#title { text-anchor:middle; font-size:17px; }
#matched { text-anchor:end; }
#search { text-anchor:end; opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = false;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = true;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames, known_font_width;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    known_font_width = get_monospace_width(frames);
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
            svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            update_text_for_elements(frames.children);

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad;
            matchedtxt.attributes.x.value = svgWidth - xpad;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function get_monospace_width(frames) {
    // Given the id="frames" element, return the width of text characters if
    // this is a monospace font, otherwise return 0.
    text = find_child(frames.children[0], "text");
    originalContent = text.textContent;
    text.textContent = "!";
    bangWidth = text.getComputedTextLength();
    text.textContent = "W";
    wWidth = text.getComputedTextLength();
    text.textContent = originalContent;
    if (bangWidth === wWidth) {
        return bangWidth;
    } else {
        return 0;
    }
}
function update_text_for_elements(elements) {
    // In order to render quickly in the browser, you want to do one pass of
    // reading attributes, and one pass of mutating attributes. See
    // https://web.dev/avoid-large-complex-layouts-and-layout-thrashing/ for details.

    // Fall back to inefficient calculation, if we're variable-width font.
    // TODO This should be optimized somehow too.
    if (known_font_width === 0) {
        for (var i = 0; i < elements.length; i++) {
            update_text(elements[i]);
        }
        return;
    }

    var textElemNewAttributes = [];
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var r = find_child(e, "rect");
        var t = find_child(e, "text");
        var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
        var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
        var newX = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

        // Smaller than this size won't fit anything
        if (w < 2 * known_font_width) {
            textElemNewAttributes.push([newX, ""]);
            continue;
        }

        // Fit in full text width
        if (txt.length * known_font_width < w) {
            textElemNewAttributes.push([newX, txt]);
            continue;
        }

        var substringLength = Math.floor(w / known_font_width) - 2;
        if (truncate_text_right) {
            // Truncate the right side of the text.
            textElemNewAttributes.push([newX, txt.substring(0, substringLength) + ".."]);
            continue;
        } else {
            // Truncate the left side of the text.
            textElemNewAttributes.push([newX, ".." + txt.substring(txt.length - substringLength, txt.length)]);
            continue;
        }
    }

    console.assert(textElemNewAttributes.length === elements.length, "Resize failed, please file a bug at https://github.com/jonhoo/inferno/");

    // Now that we know new textContent, set it all in one go so we don't refresh a bazillion times.
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var values = textElemNewAttributes[i];
        var t = find_child(e, "text");
        t.attributes.x.value = values[0];
        t.textContent = values[1];
    }
}

function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    var to_update_text = [];
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                to_update_text.push(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                to_update_text.push(e);
            }
        }
    }
    update_text_for_elements(to_update_text);
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
    }
    update_text_for_elements(el);
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="390" fill="url(#background)"/><text id="title" fill="rgb(0,0,0)" x="50.0000%" y="24.00">Flame Graph</text><text id="details" fill="rgb(0,0,0)" x="10" y="373.00"> </text><text id="unzoom" class="hide" fill="rgb(0,0,0)" x="10" y="24.00">Reset Zoom</text><text id="search" fill="rgb(0,0,0)" x="1190" y="24.00">Search</text><text id="matched" fill="rgb(0,0,0)" x="1190" y="373.00"> </text><svg id="frames" x="10" width="1180" total_samples="120439487556"><g><title>&lt;core::option::Option&lt;T&gt; as core::ops::try_trait::Try&gt;::branch (74,304,179 samples, 0.06%)</title><rect x="0.4485%" y="213" width="0.0617%" height="15" fill="rgb(227,0,7)" fg:x="540170368" fg:w="74304179"/><text x="0.6985%" y="223.50"></text></g><g><title>&lt;core::iter::adapters::enumerate::Enumerate&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::next (376,167,954 samples, 0.31%)</title><rect x="0.4401%" y="229" width="0.3123%" height="15" fill="rgb(217,0,24)" fg:x="530102939" fg:w="376167954"/><text x="0.6901%" y="239.50"></text></g><g><title>&lt;nalgebra::base::iter::MatrixIter&lt;T,R,C,S&gt; as core::iter::traits::iterator::Iterator&gt;::next (291,796,346 samples, 0.24%)</title><rect x="0.5102%" y="213" width="0.2423%" height="15" fill="rgb(221,193,54)" fg:x="614474547" fg:w="291796346"/><text x="0.7602%" y="223.50"></text></g><g><title>&lt;nalgebra::base::iter::RawIter&lt;*const T,T,R,C,RStride,CStride&gt; as core::iter::traits::iterator::Iterator&gt;::next (291,796,346 samples, 0.24%)</title><rect x="0.5102%" y="197" width="0.2423%" height="15" fill="rgb(248,212,6)" fg:x="614474547" fg:w="291796346"/><text x="0.7602%" y="207.50"></text></g><g><title>number_recognition::activation_functions::softmax::{{closure}} (23,219,826 samples, 0.02%)</title><rect x="1.0840%" y="197" width="0.0193%" height="15" fill="rgb(208,68,35)" fg:x="1305525361" fg:w="23219826"/><text x="1.3340%" y="207.50"></text></g><g><title>std::f32::&lt;impl f32&gt;::exp (23,219,826 samples, 0.02%)</title><rect x="1.0840%" y="181" width="0.0193%" height="15" fill="rgb(232,128,0)" fg:x="1305525361" fg:w="23219826"/><text x="1.3340%" y="191.50"></text></g><g><title>__expf_fma (20,117,890 samples, 0.02%)</title><rect x="1.0865%" y="165" width="0.0167%" height="15" fill="rgb(207,160,47)" fg:x="1308627297" fg:w="20117890"/><text x="1.3365%" y="175.50"></text></g><g><title>nalgebra::base::matrix::Matrix&lt;T,R,C,S&gt;::vector_to_matrix_index (80,635,029 samples, 0.07%)</title><rect x="1.7933%" y="165" width="0.0670%" height="15" fill="rgb(228,23,34)" fg:x="2159790237" fg:w="80635029"/><text x="2.0433%" y="175.50"></text></g><g><title>nalgebra::base::ops::&lt;impl core::ops::index::Index&lt;usize&gt; for nalgebra::base::matrix::Matrix&lt;T,R,C,S&gt;&gt;::index (267,892,519 samples, 0.22%)</title><rect x="1.7149%" y="181" width="0.2224%" height="15" fill="rgb(218,30,26)" fg:x="2065401982" fg:w="267892519"/><text x="1.9649%" y="191.50"></text></g><g><title>nalgebra::base::ops::&lt;impl core::ops::index::Index&lt;(usize,usize)&gt; for nalgebra::base::matrix::Matrix&lt;T,R,C,S&gt;&gt;::index (92,869,235 samples, 0.08%)</title><rect x="1.8602%" y="165" width="0.0771%" height="15" fill="rgb(220,122,19)" fg:x="2240425266" fg:w="92869235"/><text x="2.1102%" y="175.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (2,132,783,276 samples, 1.77%)</title><rect x="0.4401%" y="245" width="1.7708%" height="15" fill="rgb(250,228,42)" fg:x="530102939" fg:w="2132783276"/><text x="0.6901%" y="255.50">&lt;..</text></g><g><title>core::option::Option&lt;T&gt;::map (1,755,842,220 samples, 1.46%)</title><rect x="0.7531%" y="229" width="1.4579%" height="15" fill="rgb(240,193,28)" fg:x="907043995" fg:w="1755842220"/><text x="1.0031%" y="239.50"></text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;mut F&gt;::call_once (1,755,067,166 samples, 1.46%)</title><rect x="0.7538%" y="213" width="1.4572%" height="15" fill="rgb(216,20,37)" fg:x="907819049" fg:w="1755067166"/><text x="1.0038%" y="223.50"></text></g><g><title>number_recognition::neural_network::NN::backprop::{{closure}} (1,334,141,028 samples, 1.11%)</title><rect x="1.1032%" y="197" width="1.1077%" height="15" fill="rgb(206,188,39)" fg:x="1328745187" fg:w="1334141028"/><text x="1.3532%" y="207.50"></text></g><g><title>number_recognition::activation_functions::leaky_relu_derivative (329,591,714 samples, 0.27%)</title><rect x="1.9373%" y="181" width="0.2737%" height="15" fill="rgb(217,207,13)" fg:x="2333294501" fg:w="329591714"/><text x="2.1873%" y="191.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialOrd for f32&gt;::lt (246,004,769 samples, 0.20%)</title><rect x="2.0067%" y="165" width="0.2043%" height="15" fill="rgb(231,73,38)" fg:x="2416881446" fg:w="246004769"/><text x="2.2567%" y="175.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_desugared (2,735,019,495 samples, 2.27%)</title><rect x="0.0064%" y="261" width="2.2709%" height="15" fill="rgb(225,20,46)" fg:x="7751707" fg:w="2735019495"/><text x="0.2564%" y="271.50">a..</text></g><g><title>core::ptr::write (79,884,987 samples, 0.07%)</title><rect x="2.2110%" y="245" width="0.0663%" height="15" fill="rgb(210,31,41)" fg:x="2662886215" fg:w="79884987"/><text x="2.4610%" y="255.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;T,I&gt;&gt;::spec_extend (2,735,795,443 samples, 2.27%)</title><rect x="0.0064%" y="277" width="2.2715%" height="15" fill="rgb(221,200,47)" fg:x="7751707" fg:w="2735795443"/><text x="0.2564%" y="287.50">&lt;..</text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (48,687,864 samples, 0.04%)</title><rect x="2.2850%" y="197" width="0.0404%" height="15" fill="rgb(226,26,5)" fg:x="2752073676" fg:w="48687864"/><text x="2.5350%" y="207.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (48,687,864 samples, 0.04%)</title><rect x="2.2850%" y="181" width="0.0404%" height="15" fill="rgb(249,33,26)" fg:x="2752073676" fg:w="48687864"/><text x="2.5350%" y="191.50"></text></g><g><title>alloc::alloc::alloc (48,687,864 samples, 0.04%)</title><rect x="2.2850%" y="165" width="0.0404%" height="15" fill="rgb(235,183,28)" fg:x="2752073676" fg:w="48687864"/><text x="2.5350%" y="175.50"></text></g><g><title>malloc (44,813,878 samples, 0.04%)</title><rect x="2.2882%" y="149" width="0.0372%" height="15" fill="rgb(221,5,38)" fg:x="2755947662" fg:w="44813878"/><text x="2.5382%" y="159.50"></text></g><g><title>_int_malloc (22,367,908 samples, 0.02%)</title><rect x="2.3069%" y="133" width="0.0186%" height="15" fill="rgb(247,18,42)" fg:x="2778393632" fg:w="22367908"/><text x="2.5569%" y="143.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (2,802,281,534 samples, 2.33%)</title><rect x="0.0000%" y="309" width="2.3267%" height="15" fill="rgb(241,131,45)" fg:x="0" fg:w="2802281534"/><text x="0.2500%" y="319.50">&lt;..</text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter_nested::SpecFromIterNested&lt;T,I&gt;&gt;::from_iter (2,801,507,951 samples, 2.33%)</title><rect x="0.0006%" y="293" width="2.3261%" height="15" fill="rgb(249,31,29)" fg:x="773583" fg:w="2801507951"/><text x="0.2506%" y="303.50">&lt;..</text></g><g><title>alloc::vec::Vec&lt;T&gt;::with_capacity (50,984,156 samples, 0.04%)</title><rect x="2.2844%" y="277" width="0.0423%" height="15" fill="rgb(225,111,53)" fg:x="2751297378" fg:w="50984156"/><text x="2.5344%" y="287.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (50,984,156 samples, 0.04%)</title><rect x="2.2844%" y="261" width="0.0423%" height="15" fill="rgb(238,160,17)" fg:x="2751297378" fg:w="50984156"/><text x="2.5344%" y="271.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (50,984,156 samples, 0.04%)</title><rect x="2.2844%" y="245" width="0.0423%" height="15" fill="rgb(214,148,48)" fg:x="2751297378" fg:w="50984156"/><text x="2.5344%" y="255.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::with_capacity_in (50,984,156 samples, 0.04%)</title><rect x="2.2844%" y="229" width="0.0423%" height="15" fill="rgb(232,36,49)" fg:x="2751297378" fg:w="50984156"/><text x="2.5344%" y="239.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::try_allocate_in (50,207,858 samples, 0.04%)</title><rect x="2.2850%" y="213" width="0.0417%" height="15" fill="rgb(209,103,24)" fg:x="2752073676" fg:w="50207858"/><text x="2.5350%" y="223.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_desugared (135,259,142 samples, 0.11%)</title><rect x="2.3418%" y="245" width="0.1123%" height="15" fill="rgb(229,88,8)" fg:x="2820473476" fg:w="135259142"/><text x="2.5918%" y="255.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (94,999,106 samples, 0.08%)</title><rect x="2.3752%" y="229" width="0.0789%" height="15" fill="rgb(213,181,19)" fg:x="2860733512" fg:w="94999106"/><text x="2.6252%" y="239.50"></text></g><g><title>&lt;core::iter::adapters::enumerate::Enumerate&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::next (94,230,981 samples, 0.08%)</title><rect x="2.3759%" y="213" width="0.0782%" height="15" fill="rgb(254,191,54)" fg:x="2861501637" fg:w="94230981"/><text x="2.6259%" y="223.50"></text></g><g><title>&lt;nalgebra::base::iter::MatrixIter&lt;T,R,C,S&gt; as core::iter::traits::iterator::Iterator&gt;::next (94,230,981 samples, 0.08%)</title><rect x="2.3759%" y="197" width="0.0782%" height="15" fill="rgb(241,83,37)" fg:x="2861501637" fg:w="94230981"/><text x="2.6259%" y="207.50"></text></g><g><title>&lt;nalgebra::base::iter::RawIter&lt;*const T,T,R,C,RStride,CStride&gt; as core::iter::traits::iterator::Iterator&gt;::next (94,230,981 samples, 0.08%)</title><rect x="2.3759%" y="181" width="0.0782%" height="15" fill="rgb(233,36,39)" fg:x="2861501637" fg:w="94230981"/><text x="2.6259%" y="191.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;T,I&gt;&gt;::spec_extend (173,181,147 samples, 0.14%)</title><rect x="2.3418%" y="261" width="0.1438%" height="15" fill="rgb(226,3,54)" fg:x="2820473476" fg:w="173181147"/><text x="2.5918%" y="271.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_trusted (37,922,005 samples, 0.03%)</title><rect x="2.4541%" y="245" width="0.0315%" height="15" fill="rgb(245,192,40)" fg:x="2955732618" fg:w="37922005"/><text x="2.7041%" y="255.50"></text></g><g><title>core::iter::traits::iterator::Iterator::for_each (37,922,005 samples, 0.03%)</title><rect x="2.4541%" y="229" width="0.0315%" height="15" fill="rgb(238,167,29)" fg:x="2955732618" fg:w="37922005"/><text x="2.7041%" y="239.50"></text></g><g><title>&lt;core::iter::adapters::rev::Rev&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::fold (37,922,005 samples, 0.03%)</title><rect x="2.4541%" y="213" width="0.0315%" height="15" fill="rgb(232,182,51)" fg:x="2955732618" fg:w="37922005"/><text x="2.7041%" y="223.50"></text></g><g><title>core::iter::traits::double_ended::DoubleEndedIterator::rfold (37,922,005 samples, 0.03%)</title><rect x="2.4541%" y="197" width="0.0315%" height="15" fill="rgb(231,60,39)" fg:x="2955732618" fg:w="37922005"/><text x="2.7041%" y="207.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::into_iter::IntoIter&lt;nalgebra::base::matrix::Matrix&lt;f32,nalgebra::base::dimension::Dyn,nalgebra::base::dimension::Dyn,nalgebra::base::vec_storage::VecStorage&lt;f32,nalgebra::base::dimension::Dyn,nalgebra::base::dimension::Dyn&gt;&gt;&gt;&gt; (13,913,780 samples, 0.01%)</title><rect x="2.4741%" y="181" width="0.0116%" height="15" fill="rgb(208,69,12)" fg:x="2979740843" fg:w="13913780"/><text x="2.7241%" y="191.50"></text></g><g><title>&lt;alloc::vec::into_iter::IntoIter&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (13,913,780 samples, 0.01%)</title><rect x="2.4741%" y="165" width="0.0116%" height="15" fill="rgb(235,93,37)" fg:x="2979740843" fg:w="13913780"/><text x="2.7241%" y="175.50"></text></g><g><title>core::ptr::drop_in_place&lt;&lt;alloc::vec::into_iter::IntoIter&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop::DropGuard&lt;nalgebra::base::matrix::Matrix&lt;f32,nalgebra::base::dimension::Dyn,nalgebra::base::dimension::Dyn,nalgebra::base::vec_storage::VecStorage&lt;f32,nalgebra::base::dimension::Dyn,nalgebra::base::dimension::Dyn&gt;&gt;,alloc::alloc::Global&gt;&gt; (13,913,780 samples, 0.01%)</title><rect x="2.4741%" y="149" width="0.0116%" height="15" fill="rgb(213,116,39)" fg:x="2979740843" fg:w="13913780"/><text x="2.7241%" y="159.50"></text></g><g><title>&lt;&lt;alloc::vec::into_iter::IntoIter&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop::DropGuard&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (13,913,780 samples, 0.01%)</title><rect x="2.4741%" y="133" width="0.0116%" height="15" fill="rgb(222,207,29)" fg:x="2979740843" fg:w="13913780"/><text x="2.7241%" y="143.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;nalgebra::base::matrix::Matrix&lt;f32,nalgebra::base::dimension::Dyn,nalgebra::base::dimension::Dyn,nalgebra::base::vec_storage::VecStorage&lt;f32,nalgebra::base::dimension::Dyn,nalgebra::base::dimension::Dyn&gt;&gt;&gt;&gt; (13,913,780 samples, 0.01%)</title><rect x="2.4741%" y="117" width="0.0116%" height="15" fill="rgb(206,96,30)" fg:x="2979740843" fg:w="13913780"/><text x="2.7241%" y="127.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (13,913,780 samples, 0.01%)</title><rect x="2.4741%" y="101" width="0.0116%" height="15" fill="rgb(218,138,4)" fg:x="2979740843" fg:w="13913780"/><text x="2.7241%" y="111.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::deallocate (13,913,780 samples, 0.01%)</title><rect x="2.4741%" y="85" width="0.0116%" height="15" fill="rgb(250,191,14)" fg:x="2979740843" fg:w="13913780"/><text x="2.7241%" y="95.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (13,913,780 samples, 0.01%)</title><rect x="2.4741%" y="69" width="0.0116%" height="15" fill="rgb(239,60,40)" fg:x="2979740843" fg:w="13913780"/><text x="2.7241%" y="79.50"></text></g><g><title>alloc::alloc::dealloc (13,913,780 samples, 0.01%)</title><rect x="2.4741%" y="53" width="0.0116%" height="15" fill="rgb(206,27,48)" fg:x="2979740843" fg:w="13913780"/><text x="2.7241%" y="63.50"></text></g><g><title>cfree@GLIBC_2.2.5 (13,148,192 samples, 0.01%)</title><rect x="2.4747%" y="37" width="0.0109%" height="15" fill="rgb(225,35,8)" fg:x="2980506431" fg:w="13148192"/><text x="2.7247%" y="47.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (13,116,457 samples, 0.01%)</title><rect x="2.4856%" y="261" width="0.0109%" height="15" fill="rgb(250,213,24)" fg:x="2993654623" fg:w="13116457"/><text x="2.7356%" y="271.50"></text></g><g><title>core::option::Option&lt;T&gt;::map (13,116,457 samples, 0.01%)</title><rect x="2.4856%" y="245" width="0.0109%" height="15" fill="rgb(247,123,22)" fg:x="2993654623" fg:w="13116457"/><text x="2.7356%" y="255.50"></text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;mut F&gt;::call_once (13,116,457 samples, 0.01%)</title><rect x="2.4856%" y="229" width="0.0109%" height="15" fill="rgb(231,138,38)" fg:x="2993654623" fg:w="13116457"/><text x="2.7356%" y="239.50"></text></g><g><title>number_recognition::neural_network::NN::backprop::{{closure}} (13,116,457 samples, 0.01%)</title><rect x="2.4856%" y="213" width="0.0109%" height="15" fill="rgb(231,145,46)" fg:x="2993654623" fg:w="13116457"/><text x="2.7356%" y="223.50"></text></g><g><title>number_recognition::activation_functions::leaky_relu_derivative (12,344,348 samples, 0.01%)</title><rect x="2.4862%" y="197" width="0.0102%" height="15" fill="rgb(251,118,11)" fg:x="2994426732" fg:w="12344348"/><text x="2.7362%" y="207.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialOrd for f32&gt;::lt (12,344,348 samples, 0.01%)</title><rect x="2.4862%" y="181" width="0.0102%" height="15" fill="rgb(217,147,25)" fg:x="2994426732" fg:w="12344348"/><text x="2.7362%" y="191.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (210,260,484 samples, 0.17%)</title><rect x="2.3309%" y="293" width="0.1746%" height="15" fill="rgb(247,81,37)" fg:x="2807287078" fg:w="210260484"/><text x="2.5809%" y="303.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter_nested::SpecFromIterNested&lt;T,I&gt;&gt;::from_iter (209,488,147 samples, 0.17%)</title><rect x="2.3315%" y="277" width="0.1739%" height="15" fill="rgb(209,12,38)" fg:x="2808059415" fg:w="209488147"/><text x="2.5815%" y="287.50"></text></g><g><title>__memmove_avx_unaligned_erms (30,146,703 samples, 0.03%)</title><rect x="2.6285%" y="197" width="0.0250%" height="15" fill="rgb(227,1,9)" fg:x="3165782783" fg:w="30146703"/><text x="2.8785%" y="207.50"></text></g><g><title>_int_free (20,798,105 samples, 0.02%)</title><rect x="2.6536%" y="197" width="0.0173%" height="15" fill="rgb(248,47,43)" fg:x="3195929486" fg:w="20798105"/><text x="2.9036%" y="207.50"></text></g><g><title>_int_malloc (124,771,124 samples, 0.10%)</title><rect x="2.6759%" y="197" width="0.1036%" height="15" fill="rgb(221,10,30)" fg:x="3222898553" fg:w="124771124"/><text x="2.9259%" y="207.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::grow (285,575,010 samples, 0.24%)</title><rect x="2.5495%" y="277" width="0.2371%" height="15" fill="rgb(210,229,1)" fg:x="3070612673" fg:w="285575010"/><text x="2.7995%" y="287.50"></text></g><g><title>alloc::alloc::Global::grow_impl (285,575,010 samples, 0.24%)</title><rect x="2.5495%" y="261" width="0.2371%" height="15" fill="rgb(222,148,37)" fg:x="3070612673" fg:w="285575010"/><text x="2.7995%" y="271.50"></text></g><g><title>alloc::alloc::realloc (285,575,010 samples, 0.24%)</title><rect x="2.5495%" y="245" width="0.2371%" height="15" fill="rgb(234,67,33)" fg:x="3070612673" fg:w="285575010"/><text x="2.7995%" y="255.50"></text></g><g><title>realloc (273,145,568 samples, 0.23%)</title><rect x="2.5598%" y="229" width="0.2268%" height="15" fill="rgb(247,98,35)" fg:x="3083042115" fg:w="273145568"/><text x="2.8098%" y="239.50"></text></g><g><title>_int_realloc (234,462,920 samples, 0.19%)</title><rect x="2.5919%" y="213" width="0.1947%" height="15" fill="rgb(247,138,52)" fg:x="3121724763" fg:w="234462920"/><text x="2.8419%" y="223.50"></text></g><g><title>alloc::raw_vec::finish_grow (373,740,061 samples, 0.31%)</title><rect x="2.5348%" y="293" width="0.3103%" height="15" fill="rgb(213,79,30)" fg:x="3052875673" fg:w="373740061"/><text x="2.7848%" y="303.50"></text></g><g><title>malloc (67,335,913 samples, 0.06%)</title><rect x="2.7892%" y="277" width="0.0559%" height="15" fill="rgb(246,177,23)" fg:x="3359279821" fg:w="67335913"/><text x="3.0392%" y="287.50"></text></g><g><title>_int_malloc (52,644,527 samples, 0.04%)</title><rect x="2.8014%" y="261" width="0.0437%" height="15" fill="rgb(230,62,27)" fg:x="3373971207" fg:w="52644527"/><text x="3.0514%" y="271.50"></text></g><g><title>core::iter::traits::iterator::Iterator::for_each::call::{{closure}} (13,973,755 samples, 0.01%)</title><rect x="2.8459%" y="149" width="0.0116%" height="15" fill="rgb(216,154,8)" fg:x="3427544308" fg:w="13973755"/><text x="3.0959%" y="159.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_trusted::{{closure}} (13,973,755 samples, 0.01%)</title><rect x="2.8459%" y="133" width="0.0116%" height="15" fill="rgb(244,35,45)" fg:x="3427544308" fg:w="13973755"/><text x="3.0959%" y="143.50"></text></g><g><title>core::ptr::write (13,973,755 samples, 0.01%)</title><rect x="2.8459%" y="117" width="0.0116%" height="15" fill="rgb(251,115,12)" fg:x="3427544308" fg:w="13973755"/><text x="3.0959%" y="127.50"></text></g><g><title>core::iter::adapters::map::map_fold::{{closure}} (52,330,581 samples, 0.04%)</title><rect x="2.8459%" y="165" width="0.0434%" height="15" fill="rgb(240,54,50)" fg:x="3427544308" fg:w="52330581"/><text x="3.0959%" y="175.50"></text></g><g><title>number_recognition::training_data::TrainingData::read_images::{{closure}} (38,356,826 samples, 0.03%)</title><rect x="2.8575%" y="149" width="0.0318%" height="15" fill="rgb(233,84,52)" fg:x="3441518063" fg:w="38356826"/><text x="3.1075%" y="159.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;T,I&gt;&gt;::spec_extend (60,992,468 samples, 0.05%)</title><rect x="2.8459%" y="245" width="0.0506%" height="15" fill="rgb(207,117,47)" fg:x="3427544308" fg:w="60992468"/><text x="3.0959%" y="255.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_trusted (60,992,468 samples, 0.05%)</title><rect x="2.8459%" y="229" width="0.0506%" height="15" fill="rgb(249,43,39)" fg:x="3427544308" fg:w="60992468"/><text x="3.0959%" y="239.50"></text></g><g><title>core::iter::traits::iterator::Iterator::for_each (60,992,468 samples, 0.05%)</title><rect x="2.8459%" y="213" width="0.0506%" height="15" fill="rgb(209,38,44)" fg:x="3427544308" fg:w="60992468"/><text x="3.0959%" y="223.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (60,992,468 samples, 0.05%)</title><rect x="2.8459%" y="197" width="0.0506%" height="15" fill="rgb(236,212,23)" fg:x="3427544308" fg:w="60992468"/><text x="3.0959%" y="207.50"></text></g><g><title>&lt;alloc::vec::into_iter::IntoIter&lt;T,A&gt; as core::iter::traits::iterator::Iterator&gt;::fold (60,992,468 samples, 0.05%)</title><rect x="2.8459%" y="181" width="0.0506%" height="15" fill="rgb(242,79,21)" fg:x="3427544308" fg:w="60992468"/><text x="3.0959%" y="191.50"></text></g><g><title>alloc::vec::in_place_collect::&lt;impl alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt; for alloc::vec::Vec&lt;T&gt;&gt;::from_iter (62,386,123 samples, 0.05%)</title><rect x="2.8451%" y="293" width="0.0518%" height="15" fill="rgb(211,96,35)" fg:x="3426615734" fg:w="62386123"/><text x="3.0951%" y="303.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter_nested::SpecFromIterNested&lt;T,I&gt;&gt;::from_iter{{reify.shim}} (61,917,906 samples, 0.05%)</title><rect x="2.8455%" y="277" width="0.0514%" height="15" fill="rgb(253,215,40)" fg:x="3427083951" fg:w="61917906"/><text x="3.0955%" y="287.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter_nested::SpecFromIterNested&lt;T,I&gt;&gt;::from_iter (61,917,906 samples, 0.05%)</title><rect x="2.8455%" y="261" width="0.0514%" height="15" fill="rgb(211,81,21)" fg:x="3427083951" fg:w="61917906"/><text x="3.0955%" y="271.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (18,645,872 samples, 0.02%)</title><rect x="2.9200%" y="165" width="0.0155%" height="15" fill="rgb(208,190,38)" fg:x="3516864528" fg:w="18645872"/><text x="3.1700%" y="175.50"></text></g><g><title>core::option::Option&lt;T&gt;::map (18,645,872 samples, 0.02%)</title><rect x="2.9200%" y="149" width="0.0155%" height="15" fill="rgb(235,213,38)" fg:x="3516864528" fg:w="18645872"/><text x="3.1700%" y="159.50"></text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;mut F&gt;::call_once (18,645,872 samples, 0.02%)</title><rect x="2.9200%" y="133" width="0.0155%" height="15" fill="rgb(237,122,38)" fg:x="3516864528" fg:w="18645872"/><text x="3.1700%" y="143.50"></text></g><g><title>number_recognition::activation_functions::softmax::{{closure}} (18,645,872 samples, 0.02%)</title><rect x="2.9200%" y="117" width="0.0155%" height="15" fill="rgb(244,218,35)" fg:x="3516864528" fg:w="18645872"/><text x="3.1700%" y="127.50"></text></g><g><title>std::f32::&lt;impl f32&gt;::exp (18,645,872 samples, 0.02%)</title><rect x="2.9200%" y="101" width="0.0155%" height="15" fill="rgb(240,68,47)" fg:x="3516864528" fg:w="18645872"/><text x="3.1700%" y="111.50"></text></g><g><title>__expf_fma (18,645,872 samples, 0.02%)</title><rect x="2.9200%" y="85" width="0.0155%" height="15" fill="rgb(210,16,53)" fg:x="3516864528" fg:w="18645872"/><text x="3.1700%" y="95.50"></text></g><g><title>nalgebra::base::construction::&lt;impl nalgebra::base::matrix::Matrix&lt;T,nalgebra::base::dimension::Dyn,C,&lt;nalgebra::base::default_allocator::DefaultAllocator as nalgebra::base::allocator::Allocator&lt;nalgebra::base::dimension::Dyn,C&gt;&gt;::Buffer&lt;T&gt;&gt;&gt;::from_iterator (33,348,659 samples, 0.03%)</title><rect x="2.9155%" y="277" width="0.0277%" height="15" fill="rgb(235,124,12)" fg:x="3511443887" fg:w="33348659"/><text x="3.1655%" y="287.50"></text></g><g><title>nalgebra::base::construction::&lt;impl nalgebra::base::matrix::Matrix&lt;T,R,C,&lt;nalgebra::base::default_allocator::DefaultAllocator as nalgebra::base::allocator::Allocator&lt;R,C&gt;&gt;::Buffer&lt;T&gt;&gt;&gt;::from_iterator_generic (33,348,659 samples, 0.03%)</title><rect x="2.9155%" y="261" width="0.0277%" height="15" fill="rgb(224,169,11)" fg:x="3511443887" fg:w="33348659"/><text x="3.1655%" y="271.50"></text></g><g><title>&lt;nalgebra::base::default_allocator::DefaultAllocator as nalgebra::base::allocator::Allocator&lt;nalgebra::base::dimension::Dyn,C&gt;&gt;::allocate_from_iterator (33,348,659 samples, 0.03%)</title><rect x="2.9155%" y="245" width="0.0277%" height="15" fill="rgb(250,166,2)" fg:x="3511443887" fg:w="33348659"/><text x="3.1655%" y="255.50"></text></g><g><title>core::iter::traits::iterator::Iterator::collect (33,348,659 samples, 0.03%)</title><rect x="2.9155%" y="229" width="0.0277%" height="15" fill="rgb(242,216,29)" fg:x="3511443887" fg:w="33348659"/><text x="3.1655%" y="239.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as core::iter::traits::collect::FromIterator&lt;T&gt;&gt;::from_iter (33,348,659 samples, 0.03%)</title><rect x="2.9155%" y="213" width="0.0277%" height="15" fill="rgb(230,116,27)" fg:x="3511443887" fg:w="33348659"/><text x="3.1655%" y="223.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (33,348,659 samples, 0.03%)</title><rect x="2.9155%" y="197" width="0.0277%" height="15" fill="rgb(228,99,48)" fg:x="3511443887" fg:w="33348659"/><text x="3.1655%" y="207.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter_nested::SpecFromIterNested&lt;T,I&gt;&gt;::from_iter (33,348,659 samples, 0.03%)</title><rect x="2.9155%" y="181" width="0.0277%" height="15" fill="rgb(253,11,6)" fg:x="3511443887" fg:w="33348659"/><text x="3.1655%" y="191.50"></text></g><g><title>nalgebra::base::min_max::&lt;impl nalgebra::base::matrix::Matrix&lt;T,R,C,S&gt;&gt;::max (20,117,271 samples, 0.02%)</title><rect x="2.9432%" y="277" width="0.0167%" height="15" fill="rgb(247,143,39)" fg:x="3544792546" fg:w="20117271"/><text x="3.1932%" y="287.50"></text></g><g><title>nalgebra::base::matrix::Matrix&lt;T,R,C,S&gt;::fold_with (19,342,071 samples, 0.02%)</title><rect x="2.9439%" y="261" width="0.0161%" height="15" fill="rgb(236,97,10)" fg:x="3545567746" fg:w="19342071"/><text x="3.1939%" y="271.50"></text></g><g><title>core::iter::traits::iterator::Iterator::fold (19,342,071 samples, 0.02%)</title><rect x="2.9439%" y="245" width="0.0161%" height="15" fill="rgb(233,208,19)" fg:x="3545567746" fg:w="19342071"/><text x="3.1939%" y="255.50"></text></g><g><title>nalgebra::base::ops::&lt;impl core::ops::arith::Div&lt;T&gt; for &amp;nalgebra::base::matrix::Matrix&lt;T,R,C,S&gt;&gt;::div (16,939,415 samples, 0.01%)</title><rect x="2.9599%" y="277" width="0.0141%" height="15" fill="rgb(216,164,2)" fg:x="3564909817" fg:w="16939415"/><text x="3.2099%" y="287.50"></text></g><g><title>number_recognition::activation_functions::softmax (94,392,339 samples, 0.08%)</title><rect x="2.9046%" y="293" width="0.0784%" height="15" fill="rgb(220,129,5)" fg:x="3498294303" fg:w="94392339"/><text x="3.1546%" y="303.50"></text></g><g><title>alloc::raw_vec::finish_grow (15,438,897 samples, 0.01%)</title><rect x="3.0421%" y="277" width="0.0128%" height="15" fill="rgb(242,17,10)" fg:x="3663871867" fg:w="15438897"/><text x="3.2921%" y="287.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::push (20,961,294 samples, 0.02%)</title><rect x="3.0549%" y="277" width="0.0174%" height="15" fill="rgb(242,107,0)" fg:x="3679310764" fg:w="20961294"/><text x="3.3049%" y="287.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::push_mut (20,961,294 samples, 0.02%)</title><rect x="3.0549%" y="261" width="0.0174%" height="15" fill="rgb(251,28,31)" fg:x="3679310764" fg:w="20961294"/><text x="3.3049%" y="271.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (54,219,577 samples, 0.05%)</title><rect x="3.0742%" y="181" width="0.0450%" height="15" fill="rgb(233,223,10)" fg:x="3702595872" fg:w="54219577"/><text x="3.3242%" y="191.50"></text></g><g><title>alloc::alloc::dealloc (54,219,577 samples, 0.05%)</title><rect x="3.0742%" y="165" width="0.0450%" height="15" fill="rgb(215,21,27)" fg:x="3702595872" fg:w="54219577"/><text x="3.3242%" y="175.50"></text></g><g><title>cfree@GLIBC_2.2.5 (48,030,361 samples, 0.04%)</title><rect x="3.0794%" y="149" width="0.0399%" height="15" fill="rgb(232,23,21)" fg:x="3708785088" fg:w="48030361"/><text x="3.3294%" y="159.50"></text></g><g><title>_int_free (31,004,044 samples, 0.03%)</title><rect x="3.0935%" y="133" width="0.0257%" height="15" fill="rgb(244,5,23)" fg:x="3725811405" fg:w="31004044"/><text x="3.3435%" y="143.50"></text></g><g><title>core::ptr::drop_in_place&lt;nalgebra::base::matrix::Matrix&lt;f32,nalgebra::base::dimension::Dyn,nalgebra::base::dimension::Const&lt;1_usize&gt;,nalgebra::base::vec_storage::VecStorage&lt;f32,nalgebra::base::dimension::Dyn,nalgebra::base::dimension::Const&lt;1_usize&gt;&gt;&gt;&gt; (56,541,957 samples, 0.05%)</title><rect x="3.0730%" y="277" width="0.0469%" height="15" fill="rgb(226,81,46)" fg:x="3701048832" fg:w="56541957"/><text x="3.3230%" y="287.50"></text></g><g><title>core::ptr::drop_in_place&lt;nalgebra::base::vec_storage::VecStorage&lt;f32,nalgebra::base::dimension::Dyn,nalgebra::base::dimension::Const&lt;1_usize&gt;&gt;&gt; (56,541,957 samples, 0.05%)</title><rect x="3.0730%" y="261" width="0.0469%" height="15" fill="rgb(247,70,30)" fg:x="3701048832" fg:w="56541957"/><text x="3.3230%" y="271.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;f32&gt;&gt; (56,541,957 samples, 0.05%)</title><rect x="3.0730%" y="245" width="0.0469%" height="15" fill="rgb(212,68,19)" fg:x="3701048832" fg:w="56541957"/><text x="3.3230%" y="255.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;f32&gt;&gt; (56,541,957 samples, 0.05%)</title><rect x="3.0730%" y="229" width="0.0469%" height="15" fill="rgb(240,187,13)" fg:x="3701048832" fg:w="56541957"/><text x="3.3230%" y="239.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (56,541,957 samples, 0.05%)</title><rect x="3.0730%" y="213" width="0.0469%" height="15" fill="rgb(223,113,26)" fg:x="3701048832" fg:w="56541957"/><text x="3.3230%" y="223.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::deallocate (54,994,917 samples, 0.05%)</title><rect x="3.0742%" y="197" width="0.0457%" height="15" fill="rgb(206,192,2)" fg:x="3702595872" fg:w="54994917"/><text x="3.3242%" y="207.50"></text></g><g><title>nalgebra::base::construction::&lt;impl nalgebra::base::matrix::Matrix&lt;T,nalgebra::base::dimension::Dyn,C,&lt;nalgebra::base::default_allocator::DefaultAllocator as nalgebra::base::allocator::Allocator&lt;nalgebra::base::dimension::Dyn,C&gt;&gt;::Buffer&lt;T&gt;&gt;&gt;::from_iterator (13,156,834 samples, 0.01%)</title><rect x="3.1199%" y="277" width="0.0109%" height="15" fill="rgb(241,108,4)" fg:x="3757590789" fg:w="13156834"/><text x="3.3699%" y="287.50"></text></g><g><title>nalgebra::base::construction::&lt;impl nalgebra::base::matrix::Matrix&lt;T,R,C,&lt;nalgebra::base::default_allocator::DefaultAllocator as nalgebra::base::allocator::Allocator&lt;R,C&gt;&gt;::Buffer&lt;T&gt;&gt;&gt;::from_iterator_generic (13,156,834 samples, 0.01%)</title><rect x="3.1199%" y="261" width="0.0109%" height="15" fill="rgb(247,173,49)" fg:x="3757590789" fg:w="13156834"/><text x="3.3699%" y="271.50"></text></g><g><title>&lt;nalgebra::base::default_allocator::DefaultAllocator as nalgebra::base::allocator::Allocator&lt;nalgebra::base::dimension::Dyn,C&gt;&gt;::allocate_from_iterator (13,156,834 samples, 0.01%)</title><rect x="3.1199%" y="245" width="0.0109%" height="15" fill="rgb(224,114,35)" fg:x="3757590789" fg:w="13156834"/><text x="3.3699%" y="255.50"></text></g><g><title>core::iter::traits::iterator::Iterator::collect (12,384,509 samples, 0.01%)</title><rect x="3.1205%" y="229" width="0.0103%" height="15" fill="rgb(245,159,27)" fg:x="3758363114" fg:w="12384509"/><text x="3.3705%" y="239.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as core::iter::traits::collect::FromIterator&lt;T&gt;&gt;::from_iter (12,384,509 samples, 0.01%)</title><rect x="3.1205%" y="213" width="0.0103%" height="15" fill="rgb(245,172,44)" fg:x="3758363114" fg:w="12384509"/><text x="3.3705%" y="223.50"></text></g><g><title>&lt;nalgebra::base::default_allocator::DefaultAllocator as nalgebra::base::allocator::Allocator&lt;R,nalgebra::base::dimension::Dyn&gt;&gt;::allocate_uninit (13,921,123 samples, 0.01%)</title><rect x="3.1424%" y="245" width="0.0116%" height="15" fill="rgb(236,23,11)" fg:x="3784650349" fg:w="13921123"/><text x="3.3924%" y="255.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::reserve_exact (13,921,123 samples, 0.01%)</title><rect x="3.1424%" y="229" width="0.0116%" height="15" fill="rgb(205,117,38)" fg:x="3784650349" fg:w="13921123"/><text x="3.3924%" y="239.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_exact (13,921,123 samples, 0.01%)</title><rect x="3.1424%" y="213" width="0.0116%" height="15" fill="rgb(237,72,25)" fg:x="3784650349" fg:w="13921123"/><text x="3.3924%" y="223.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::reserve_exact (13,921,123 samples, 0.01%)</title><rect x="3.1424%" y="197" width="0.0116%" height="15" fill="rgb(244,70,9)" fg:x="3784650349" fg:w="13921123"/><text x="3.3924%" y="207.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::try_reserve_exact (13,921,123 samples, 0.01%)</title><rect x="3.1424%" y="181" width="0.0116%" height="15" fill="rgb(217,125,39)" fg:x="3784650349" fg:w="13921123"/><text x="3.3924%" y="191.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::grow_exact (12,372,734 samples, 0.01%)</title><rect x="3.1437%" y="165" width="0.0103%" height="15" fill="rgb(235,36,10)" fg:x="3786198738" fg:w="12372734"/><text x="3.3937%" y="175.50"></text></g><g><title>nalgebra::base::construction::&lt;impl nalgebra::base::matrix::Matrix&lt;core::mem::maybe_uninit::MaybeUninit&lt;T&gt;,R,C,&lt;nalgebra::base::default_allocator::DefaultAllocator as nalgebra::base::allocator::Allocator&lt;R,C&gt;&gt;::BufferUninit&lt;T&gt;&gt;&gt;::uninit (24,709,358 samples, 0.02%)</title><rect x="3.1424%" y="261" width="0.0205%" height="15" fill="rgb(251,123,47)" fg:x="3784650349" fg:w="24709358"/><text x="3.3924%" y="271.50"></text></g><g><title>&lt;nalgebra::base::uninit::Uninit as nalgebra::base::uninit::InitStatus&lt;T&gt;&gt;::init (4,261,962,720 samples, 3.54%)</title><rect x="3.1648%" y="245" width="3.5387%" height="15" fill="rgb(221,13,13)" fg:x="3811677909" fg:w="4261962720"/><text x="3.4148%" y="255.50">&lt;na..</text></g><g><title>core::clone::impls::&lt;impl core::clone::Clone for f32&gt;::clone (21,954,657,488 samples, 18.23%)</title><rect x="6.7035%" y="245" width="18.2288%" height="15" fill="rgb(238,131,9)" fg:x="8073640629" fg:w="21954657488"/><text x="6.9535%" y="255.50">core::clone::impls::&lt;impl co..</text></g><g><title>&lt;usize as core::iter::range::Step&gt;::forward_unchecked (479,838,793 samples, 0.40%)</title><rect x="25.5856%" y="213" width="0.3984%" height="15" fill="rgb(211,50,8)" fg:x="30815140815" fg:w="479838793"/><text x="25.8356%" y="223.50"></text></g><g><title>core::num::&lt;impl usize&gt;::unchecked_add (479,838,793 samples, 0.40%)</title><rect x="25.5856%" y="197" width="0.3984%" height="15" fill="rgb(245,182,24)" fg:x="30815140815" fg:w="479838793"/><text x="25.8356%" y="207.50"></text></g><g><title>nalgebra::base::matrix::Matrix&lt;T,R,C,S&gt;::transpose_to_uninit (28,193,159,396 samples, 23.41%)</title><rect x="3.1635%" y="261" width="23.4086%" height="15" fill="rgb(242,14,37)" fg:x="3810134406" fg:w="28193159396"/><text x="3.4135%" y="271.50">nalgebra::base::matrix::Matrix&lt;T,R,C,..</text></g><g><title>core::iter::range::&lt;impl core::iter::traits::iterator::Iterator for core::ops::range::Range&lt;A&gt;&gt;::next (1,974,995,685 samples, 1.64%)</title><rect x="24.9323%" y="245" width="1.6398%" height="15" fill="rgb(246,228,12)" fg:x="30028298117" fg:w="1974995685"/><text x="25.1823%" y="255.50"></text></g><g><title>&lt;core::ops::range::Range&lt;T&gt; as core::iter::range::RangeIteratorImpl&gt;::spec_next (1,974,995,685 samples, 1.64%)</title><rect x="24.9323%" y="229" width="1.6398%" height="15" fill="rgb(213,55,15)" fg:x="30028298117" fg:w="1974995685"/><text x="25.1823%" y="239.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialOrd for usize&gt;::lt (708,314,194 samples, 0.59%)</title><rect x="25.9840%" y="213" width="0.5881%" height="15" fill="rgb(209,9,3)" fg:x="31294979608" fg:w="708314194"/><text x="26.2340%" y="223.50"></text></g><g><title>nalgebra::base::matrix::Matrix&lt;T,R,C,S&gt;::transpose (28,232,548,667 samples, 23.44%)</title><rect x="3.1321%" y="277" width="23.4413%" height="15" fill="rgb(230,59,30)" fg:x="3772295720" fg:w="28232548667"/><text x="3.3821%" y="287.50">nalgebra::base::matrix::Matrix&lt;T,R,C,..</text></g><g><title>&lt;f32 as core::ops::arith::AddAssign&gt;::add_assign (34,062,784 samples, 0.03%)</title><rect x="26.5920%" y="245" width="0.0283%" height="15" fill="rgb(209,121,21)" fg:x="32027284325" fg:w="34062784"/><text x="26.8420%" y="255.50"></text></g><g><title>core::clone::impls::&lt;impl core::clone::Clone for f32&gt;::clone (44,123,372 samples, 0.04%)</title><rect x="26.6203%" y="245" width="0.0366%" height="15" fill="rgb(220,109,13)" fg:x="32061347109" fg:w="44123372"/><text x="26.8703%" y="255.50"></text></g><g><title>nalgebra::base::ops::&lt;impl core::ops::arith::Add&lt;&amp;nalgebra::base::matrix::Matrix&lt;T,R2,C2,SB&gt;&gt; for nalgebra::base::matrix::Matrix&lt;T,R1,C1,SA&gt;&gt;::add (112,251,881 samples, 0.09%)</title><rect x="26.5734%" y="277" width="0.0932%" height="15" fill="rgb(232,18,1)" fg:x="32004844387" fg:w="112251881"/><text x="26.8234%" y="287.50"></text></g><g><title>nalgebra::base::ops::&lt;impl nalgebra::base::matrix::Matrix&lt;T,R1,C1,SA&gt;&gt;::add_assign_statically_unchecked (89,811,943 samples, 0.07%)</title><rect x="26.5920%" y="261" width="0.0746%" height="15" fill="rgb(215,41,42)" fg:x="32027284325" fg:w="89811943"/><text x="26.8420%" y="271.50"></text></g><g><title>alloc::raw_vec::finish_grow (60,329,582 samples, 0.05%)</title><rect x="26.6679%" y="261" width="0.0501%" height="15" fill="rgb(224,123,36)" fg:x="32118639759" fg:w="60329582"/><text x="26.9179%" y="271.50"></text></g><g><title>malloc (58,006,882 samples, 0.05%)</title><rect x="26.6698%" y="245" width="0.0482%" height="15" fill="rgb(240,125,3)" fg:x="32120962459" fg:w="58006882"/><text x="26.9198%" y="255.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (88,215,929 samples, 0.07%)</title><rect x="26.7180%" y="165" width="0.0732%" height="15" fill="rgb(205,98,50)" fg:x="32178969341" fg:w="88215929"/><text x="26.9680%" y="175.50"></text></g><g><title>alloc::alloc::dealloc (88,215,929 samples, 0.07%)</title><rect x="26.7180%" y="149" width="0.0732%" height="15" fill="rgb(205,185,37)" fg:x="32178969341" fg:w="88215929"/><text x="26.9680%" y="159.50"></text></g><g><title>cfree@GLIBC_2.2.5 (81,238,162 samples, 0.07%)</title><rect x="26.7237%" y="133" width="0.0675%" height="15" fill="rgb(238,207,15)" fg:x="32185947108" fg:w="81238162"/><text x="26.9737%" y="143.50"></text></g><g><title>_int_free_merge_chunk (27,842,628 samples, 0.02%)</title><rect x="26.7681%" y="117" width="0.0231%" height="15" fill="rgb(213,199,42)" fg:x="32239342642" fg:w="27842628"/><text x="27.0181%" y="127.50"></text></g><g><title>nalgebra::base::ops::&lt;impl core::ops::arith::Mul&lt;&amp;nalgebra::base::matrix::Matrix&lt;T,R2,C2,SB&gt;&gt; for nalgebra::base::matrix::Matrix&lt;T,R1,C1,SA&gt;&gt;::mul (153,191,569 samples, 0.13%)</title><rect x="26.6666%" y="277" width="0.1272%" height="15" fill="rgb(235,201,11)" fg:x="32117096268" fg:w="153191569"/><text x="26.9166%" y="287.50"></text></g><g><title>core::ptr::drop_in_place&lt;nalgebra::base::matrix::Matrix&lt;f32,nalgebra::base::dimension::Dyn,nalgebra::base::dimension::Dyn,nalgebra::base::vec_storage::VecStorage&lt;f32,nalgebra::base::dimension::Dyn,nalgebra::base::dimension::Dyn&gt;&gt;&gt; (91,318,496 samples, 0.08%)</title><rect x="26.7180%" y="261" width="0.0758%" height="15" fill="rgb(207,46,11)" fg:x="32178969341" fg:w="91318496"/><text x="26.9680%" y="271.50"></text></g><g><title>core::ptr::drop_in_place&lt;nalgebra::base::vec_storage::VecStorage&lt;f32,nalgebra::base::dimension::Dyn,nalgebra::base::dimension::Dyn&gt;&gt; (91,318,496 samples, 0.08%)</title><rect x="26.7180%" y="245" width="0.0758%" height="15" fill="rgb(241,35,35)" fg:x="32178969341" fg:w="91318496"/><text x="26.9680%" y="255.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;f32&gt;&gt; (91,318,496 samples, 0.08%)</title><rect x="26.7180%" y="229" width="0.0758%" height="15" fill="rgb(243,32,47)" fg:x="32178969341" fg:w="91318496"/><text x="26.9680%" y="239.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;f32&gt;&gt; (91,318,496 samples, 0.08%)</title><rect x="26.7180%" y="213" width="0.0758%" height="15" fill="rgb(247,202,23)" fg:x="32178969341" fg:w="91318496"/><text x="26.9680%" y="223.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (91,318,496 samples, 0.08%)</title><rect x="26.7180%" y="197" width="0.0758%" height="15" fill="rgb(219,102,11)" fg:x="32178969341" fg:w="91318496"/><text x="26.9680%" y="207.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::deallocate (91,318,496 samples, 0.08%)</title><rect x="26.7180%" y="181" width="0.0758%" height="15" fill="rgb(243,110,44)" fg:x="32178969341" fg:w="91318496"/><text x="26.9680%" y="191.50"></text></g><g><title>__rustc::__rdl_dealloc (18,587,971 samples, 0.02%)</title><rect x="26.8015%" y="133" width="0.0154%" height="15" fill="rgb(222,74,54)" fg:x="32279587081" fg:w="18587971"/><text x="27.0515%" y="143.50"></text></g><g><title>std::sys::alloc::unix::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::dealloc (18,587,971 samples, 0.02%)</title><rect x="26.8015%" y="117" width="0.0154%" height="15" fill="rgb(216,99,12)" fg:x="32279587081" fg:w="18587971"/><text x="27.0515%" y="127.50"></text></g><g><title>_int_free (15,464,592 samples, 0.01%)</title><rect x="26.8690%" y="117" width="0.0128%" height="15" fill="rgb(226,22,26)" fg:x="32360906350" fg:w="15464592"/><text x="27.1190%" y="127.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (140,118,817 samples, 0.12%)</title><rect x="26.7938%" y="165" width="0.1163%" height="15" fill="rgb(217,163,10)" fg:x="32270287837" fg:w="140118817"/><text x="27.0438%" y="175.50"></text></g><g><title>alloc::alloc::dealloc (140,118,817 samples, 0.12%)</title><rect x="26.7938%" y="149" width="0.1163%" height="15" fill="rgb(213,25,53)" fg:x="32270287837" fg:w="140118817"/><text x="27.0438%" y="159.50"></text></g><g><title>cfree@GLIBC_2.2.5 (109,148,831 samples, 0.09%)</title><rect x="26.8195%" y="133" width="0.0906%" height="15" fill="rgb(252,105,26)" fg:x="32301257823" fg:w="109148831"/><text x="27.0695%" y="143.50"></text></g><g><title>_int_free_merge_chunk (34,035,712 samples, 0.03%)</title><rect x="26.8819%" y="117" width="0.0283%" height="15" fill="rgb(220,39,43)" fg:x="32376370942" fg:w="34035712"/><text x="27.1319%" y="127.50"></text></g><g><title>_int_free_create_chunk (12,380,972 samples, 0.01%)</title><rect x="26.8998%" y="101" width="0.0103%" height="15" fill="rgb(229,68,48)" fg:x="32398025682" fg:w="12380972"/><text x="27.1498%" y="111.50"></text></g><g><title>core::ptr::drop_in_place&lt;nalgebra::base::matrix::Matrix&lt;f32,nalgebra::base::dimension::Const&lt;1_usize&gt;,nalgebra::base::dimension::Dyn,nalgebra::base::vec_storage::VecStorage&lt;f32,nalgebra::base::dimension::Const&lt;1_usize&gt;,nalgebra::base::dimension::Dyn&gt;&gt;&gt; (147,078,819 samples, 0.12%)</title><rect x="26.7938%" y="261" width="0.1221%" height="15" fill="rgb(252,8,32)" fg:x="32270287837" fg:w="147078819"/><text x="27.0438%" y="271.50"></text></g><g><title>core::ptr::drop_in_place&lt;nalgebra::base::vec_storage::VecStorage&lt;f32,nalgebra::base::dimension::Const&lt;1_usize&gt;,nalgebra::base::dimension::Dyn&gt;&gt; (147,078,819 samples, 0.12%)</title><rect x="26.7938%" y="245" width="0.1221%" height="15" fill="rgb(223,20,43)" fg:x="32270287837" fg:w="147078819"/><text x="27.0438%" y="255.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;f32&gt;&gt; (147,078,819 samples, 0.12%)</title><rect x="26.7938%" y="229" width="0.1221%" height="15" fill="rgb(229,81,49)" fg:x="32270287837" fg:w="147078819"/><text x="27.0438%" y="239.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;f32&gt;&gt; (147,078,819 samples, 0.12%)</title><rect x="26.7938%" y="213" width="0.1221%" height="15" fill="rgb(236,28,36)" fg:x="32270287837" fg:w="147078819"/><text x="27.0438%" y="223.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (147,078,819 samples, 0.12%)</title><rect x="26.7938%" y="197" width="0.1221%" height="15" fill="rgb(249,185,26)" fg:x="32270287837" fg:w="147078819"/><text x="27.0438%" y="207.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::deallocate (147,078,819 samples, 0.12%)</title><rect x="26.7938%" y="181" width="0.1221%" height="15" fill="rgb(249,174,33)" fg:x="32270287837" fg:w="147078819"/><text x="27.0438%" y="191.50"></text></g><g><title>core::iter::range::&lt;impl core::iter::traits::iterator::Iterator for core::ops::range::Range&lt;A&gt;&gt;::next (110,741,444 samples, 0.09%)</title><rect x="26.9770%" y="229" width="0.0919%" height="15" fill="rgb(233,201,37)" fg:x="32490919627" fg:w="110741444"/><text x="27.2270%" y="239.50"></text></g><g><title>&lt;core::ops::range::Range&lt;T&gt; as core::iter::range::RangeIteratorImpl&gt;::spec_next (110,741,444 samples, 0.09%)</title><rect x="26.9770%" y="213" width="0.0919%" height="15" fill="rgb(221,78,26)" fg:x="32490919627" fg:w="110741444"/><text x="27.2270%" y="223.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialOrd for usize&gt;::lt (105,321,607 samples, 0.09%)</title><rect x="26.9815%" y="197" width="0.0874%" height="15" fill="rgb(250,127,30)" fg:x="32496339464" fg:w="105321607"/><text x="27.2315%" y="207.50"></text></g><g><title>core::clone::impls::&lt;impl core::clone::Clone for f32&gt;::clone (298,882,005 samples, 0.25%)</title><rect x="27.0689%" y="213" width="0.2482%" height="15" fill="rgb(230,49,44)" fg:x="32601661071" fg:w="298882005"/><text x="27.3189%" y="223.50"></text></g><g><title>&lt;f32 as core::ops::arith::Mul&gt;::mul (1,458,118,246 samples, 1.21%)</title><rect x="27.3312%" y="181" width="1.2107%" height="15" fill="rgb(229,67,23)" fg:x="32917551472" fg:w="1458118246"/><text x="27.5812%" y="191.50"></text></g><g><title>&lt;nalgebra::base::uninit::Uninit as nalgebra::base::uninit::InitStatus&lt;T&gt;&gt;::init (7,378,500,954 samples, 6.13%)</title><rect x="28.5419%" y="181" width="6.1263%" height="15" fill="rgb(249,83,47)" fg:x="34375669718" fg:w="7378500954"/><text x="28.7919%" y="191.50">&lt;nalgebr..</text></g><g><title>core::clone::impls::&lt;impl core::clone::Clone for f32&gt;::clone (4,919,841,373 samples, 4.08%)</title><rect x="34.6682%" y="181" width="4.0849%" height="15" fill="rgb(215,43,3)" fg:x="41754170672" fg:w="4919841373"/><text x="34.9182%" y="191.50">core..</text></g><g><title>&lt;usize as core::iter::range::Step&gt;::forward_unchecked (34,012,711 samples, 0.03%)</title><rect x="39.0815%" y="149" width="0.0282%" height="15" fill="rgb(238,154,13)" fg:x="47069593182" fg:w="34012711"/><text x="39.3315%" y="159.50"></text></g><g><title>core::num::&lt;impl usize&gt;::unchecked_add (34,012,711 samples, 0.03%)</title><rect x="39.0815%" y="133" width="0.0282%" height="15" fill="rgb(219,56,2)" fg:x="47069593182" fg:w="34012711"/><text x="39.3315%" y="143.50"></text></g><g><title>nalgebra::base::blas_uninit::gemm_uninit (14,687,012,935 samples, 12.19%)</title><rect x="26.9159%" y="245" width="12.1945%" height="15" fill="rgb(233,0,4)" fg:x="32417366656" fg:w="14687012935"/><text x="27.1659%" y="255.50">nalgebra::base::bl..</text></g><g><title>nalgebra::base::blas_uninit::gemv_uninit (14,502,718,520 samples, 12.04%)</title><rect x="27.0689%" y="229" width="12.0415%" height="15" fill="rgb(235,30,7)" fg:x="32601661071" fg:w="14502718520"/><text x="27.3189%" y="239.50">nalgebra::base::bl..</text></g><g><title>nalgebra::base::blas_uninit::axcpy_uninit (14,203,836,515 samples, 11.79%)</title><rect x="27.3171%" y="213" width="11.7933%" height="15" fill="rgb(250,79,13)" fg:x="32900543076" fg:w="14203836515"/><text x="27.5671%" y="223.50">nalgebra::base::b..</text></g><g><title>nalgebra::base::blas_uninit::array_axc (14,203,836,515 samples, 11.79%)</title><rect x="27.3171%" y="197" width="11.7933%" height="15" fill="rgb(211,146,34)" fg:x="32900543076" fg:w="14203836515"/><text x="27.5671%" y="207.50">nalgebra::base::b..</text></g><g><title>core::iter::range::&lt;impl core::iter::traits::iterator::Iterator for core::ops::range::Range&lt;A&gt;&gt;::next (430,367,546 samples, 0.36%)</title><rect x="38.7531%" y="181" width="0.3573%" height="15" fill="rgb(228,22,38)" fg:x="46674012045" fg:w="430367546"/><text x="39.0031%" y="191.50"></text></g><g><title>&lt;core::ops::range::Range&lt;T&gt; as core::iter::range::RangeIteratorImpl&gt;::spec_next (430,367,546 samples, 0.36%)</title><rect x="38.7531%" y="165" width="0.3573%" height="15" fill="rgb(235,168,5)" fg:x="46674012045" fg:w="430367546"/><text x="39.0031%" y="175.50"></text></g><g><title>number_recognition::neural_network::NN::backprop (43,520,229,571 samples, 36.13%)</title><rect x="2.9830%" y="293" width="36.1345%" height="15" fill="rgb(221,155,16)" fg:x="3592686642" fg:w="43520229571"/><text x="3.2330%" y="303.50">number_recognition::neural_network::NN::backprop</text></g><g><title>nalgebra::base::ops::&lt;impl core::ops::arith::Mul&lt;nalgebra::base::matrix::Matrix&lt;T,R2,C2,SB&gt;&gt; for &amp;nalgebra::base::matrix::Matrix&lt;T,R1,C1,SA&gt;&gt;::mul (14,842,628,376 samples, 12.32%)</title><rect x="26.7938%" y="277" width="12.3237%" height="15" fill="rgb(215,215,53)" fg:x="32270287837" fg:w="14842628376"/><text x="27.0438%" y="287.50">nalgebra::base::op..</text></g><g><title>nalgebra::base::ops::&lt;impl core::ops::arith::Mul&lt;&amp;nalgebra::base::matrix::Matrix&lt;T,R2,C2,SB&gt;&gt; for &amp;nalgebra::base::matrix::Matrix&lt;T,R1,C1,SA&gt;&gt;::mul (14,695,549,557 samples, 12.20%)</title><rect x="26.9159%" y="261" width="12.2016%" height="15" fill="rgb(223,4,10)" fg:x="32417366656" fg:w="14695549557"/><text x="27.1659%" y="271.50">nalgebra::base::op..</text></g><g><title>number_recognition::neural_network::NN::forward_pass (12,388,198 samples, 0.01%)</title><rect x="39.1175%" y="293" width="0.0103%" height="15" fill="rgb(234,103,6)" fg:x="47112916213" fg:w="12388198"/><text x="39.3675%" y="303.50"></text></g><g><title>nalgebra::base::matrix::Matrix&lt;T,R,C,S&gt;::clone_owned (34,027,719 samples, 0.03%)</title><rect x="39.1406%" y="197" width="0.0283%" height="15" fill="rgb(227,97,0)" fg:x="47140747943" fg:w="34027719"/><text x="39.3906%" y="207.50"></text></g><g><title>&lt;nalgebra::base::vec_storage::VecStorage&lt;T,nalgebra::base::dimension::Dyn,C&gt; as nalgebra::base::storage::Storage&lt;T,nalgebra::base::dimension::Dyn,C&gt;&gt;::clone_owned (34,027,719 samples, 0.03%)</title><rect x="39.1406%" y="181" width="0.0283%" height="15" fill="rgb(234,150,53)" fg:x="47140747943" fg:w="34027719"/><text x="39.3906%" y="191.50"></text></g><g><title>&lt;nalgebra::base::vec_storage::VecStorage&lt;T,R,C&gt; as core::clone::Clone&gt;::clone (34,027,719 samples, 0.03%)</title><rect x="39.1406%" y="165" width="0.0283%" height="15" fill="rgb(228,201,54)" fg:x="47140747943" fg:w="34027719"/><text x="39.3906%" y="175.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (34,027,719 samples, 0.03%)</title><rect x="39.1406%" y="149" width="0.0283%" height="15" fill="rgb(222,22,37)" fg:x="47140747943" fg:w="34027719"/><text x="39.3906%" y="159.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (33,253,065 samples, 0.03%)</title><rect x="39.1413%" y="133" width="0.0276%" height="15" fill="rgb(237,53,32)" fg:x="47141522597" fg:w="33253065"/><text x="39.3913%" y="143.50"></text></g><g><title>&lt;T as alloc::slice::&lt;impl [T]&gt;::to_vec_in::ConvertVec&gt;::to_vec (33,253,065 samples, 0.03%)</title><rect x="39.1413%" y="117" width="0.0276%" height="15" fill="rgb(233,25,53)" fg:x="47141522597" fg:w="33253065"/><text x="39.3913%" y="127.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::copy_to_nonoverlapping (33,253,065 samples, 0.03%)</title><rect x="39.1413%" y="101" width="0.0276%" height="15" fill="rgb(210,40,34)" fg:x="47141522597" fg:w="33253065"/><text x="39.3913%" y="111.50"></text></g><g><title>core::ptr::copy_nonoverlapping (33,253,065 samples, 0.03%)</title><rect x="39.1413%" y="85" width="0.0276%" height="15" fill="rgb(241,220,44)" fg:x="47141522597" fg:w="33253065"/><text x="39.3913%" y="95.50"></text></g><g><title>__memmove_avx_unaligned_erms (33,253,065 samples, 0.03%)</title><rect x="39.1413%" y="69" width="0.0276%" height="15" fill="rgb(235,28,35)" fg:x="47141522597" fg:w="33253065"/><text x="39.3913%" y="79.50"></text></g><g><title>nalgebra::base::ops::&lt;impl core::ops::arith::Mul&lt;T&gt; for &amp;nalgebra::base::matrix::Matrix&lt;T,R,C,S&gt;&gt;::mul (72,744,340 samples, 0.06%)</title><rect x="39.1406%" y="213" width="0.0604%" height="15" fill="rgb(210,56,17)" fg:x="47140747943" fg:w="72744340"/><text x="39.3906%" y="223.50"></text></g><g><title>nalgebra::base::ops::&lt;impl core::ops::arith::Mul&lt;T&gt; for nalgebra::base::matrix::Matrix&lt;T,R,C,S&gt;&gt;::mul (38,716,621 samples, 0.03%)</title><rect x="39.1689%" y="197" width="0.0321%" height="15" fill="rgb(224,130,29)" fg:x="47174775662" fg:w="38716621"/><text x="39.4189%" y="207.50"></text></g><g><title>core::clone::impls::&lt;impl core::clone::Clone for f32&gt;::clone (16,170,358 samples, 0.01%)</title><rect x="39.1876%" y="181" width="0.0134%" height="15" fill="rgb(235,212,8)" fg:x="47197321925" fg:w="16170358"/><text x="39.4376%" y="191.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (102,120,935 samples, 0.08%)</title><rect x="39.1406%" y="277" width="0.0848%" height="15" fill="rgb(223,33,50)" fg:x="47140747943" fg:w="102120935"/><text x="39.3906%" y="287.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::fold (102,120,935 samples, 0.08%)</title><rect x="39.1406%" y="261" width="0.0848%" height="15" fill="rgb(219,149,13)" fg:x="47140747943" fg:w="102120935"/><text x="39.3906%" y="271.50"></text></g><g><title>core::iter::adapters::map::map_fold::{{closure}} (102,120,935 samples, 0.08%)</title><rect x="39.1406%" y="245" width="0.0848%" height="15" fill="rgb(250,156,29)" fg:x="47140747943" fg:w="102120935"/><text x="39.3906%" y="255.50"></text></g><g><title>number_recognition::optimisation_algos::Optimisation::calculate_change::{{closure}} (102,120,935 samples, 0.08%)</title><rect x="39.1406%" y="229" width="0.0848%" height="15" fill="rgb(216,193,19)" fg:x="47140747943" fg:w="102120935"/><text x="39.3906%" y="239.50"></text></g><g><title>nalgebra::base::ops::&lt;impl core::ops::arith::Mul&lt;T&gt; for nalgebra::base::matrix::Matrix&lt;T,R,C,S&gt;&gt;::mul (29,376,595 samples, 0.02%)</title><rect x="39.2010%" y="213" width="0.0244%" height="15" fill="rgb(216,135,14)" fg:x="47213492283" fg:w="29376595"/><text x="39.4510%" y="223.50"></text></g><g><title>core::clone::impls::&lt;impl core::clone::Clone for f32&gt;::clone (18,561,894 samples, 0.02%)</title><rect x="39.2100%" y="197" width="0.0154%" height="15" fill="rgb(241,47,5)" fg:x="47224306984" fg:w="18561894"/><text x="39.4600%" y="207.50"></text></g><g><title>&lt;f32 as core::ops::arith::AddAssign&gt;::add_assign (17,520,908,274 samples, 14.55%)</title><rect x="39.2801%" y="149" width="14.5475%" height="15" fill="rgb(233,42,35)" fg:x="47308695320" fg:w="17520908274"/><text x="39.5301%" y="159.50">&lt;f32 as core::ops::ari..</text></g><g><title>core::clone::impls::&lt;impl core::clone::Clone for f32&gt;::clone (7,586,570,353 samples, 6.30%)</title><rect x="53.8275%" y="149" width="6.2991%" height="15" fill="rgb(231,13,6)" fg:x="64829603594" fg:w="7586570353"/><text x="54.0775%" y="159.50">core::cl..</text></g><g><title>nalgebra::base::ops::&lt;impl core::ops::arith::AddAssign&lt;&amp;nalgebra::base::matrix::Matrix&lt;T,R2,C2,SB&gt;&gt; for nalgebra::base::matrix::Matrix&lt;T,R1,C1,SA&gt;&gt;::add_assign (27,011,008,750 samples, 22.43%)</title><rect x="39.2511%" y="181" width="22.4270%" height="15" fill="rgb(207,181,40)" fg:x="47273837834" fg:w="27011008750"/><text x="39.5011%" y="191.50">nalgebra::base::ops::&lt;impl core::ops..</text></g><g><title>nalgebra::base::ops::&lt;impl nalgebra::base::matrix::Matrix&lt;T,R1,C1,SA&gt;&gt;::add_assign_statically_unchecked (27,011,008,750 samples, 22.43%)</title><rect x="39.2511%" y="165" width="22.4270%" height="15" fill="rgb(254,173,49)" fg:x="47273837834" fg:w="27011008750"/><text x="39.5011%" y="175.50">nalgebra::base::ops::&lt;impl nalgebra:..</text></g><g><title>core::iter::range::&lt;impl core::iter::traits::iterator::Iterator for core::ops::range::Range&lt;A&gt;&gt;::next (1,868,672,637 samples, 1.55%)</title><rect x="60.1266%" y="149" width="1.5515%" height="15" fill="rgb(221,1,38)" fg:x="72416173947" fg:w="1868672637"/><text x="60.3766%" y="159.50"></text></g><g><title>&lt;core::ops::range::Range&lt;T&gt; as core::iter::range::RangeIteratorImpl&gt;::spec_next (1,868,672,637 samples, 1.55%)</title><rect x="60.1266%" y="133" width="1.5515%" height="15" fill="rgb(206,124,46)" fg:x="72416173947" fg:w="1868672637"/><text x="60.3766%" y="143.50"></text></g><g><title>&lt;usize as core::iter::range::Step&gt;::forward_unchecked (1,860,956,130 samples, 1.55%)</title><rect x="60.1330%" y="117" width="1.5451%" height="15" fill="rgb(249,21,11)" fg:x="72423890454" fg:w="1860956130"/><text x="60.3830%" y="127.50"></text></g><g><title>core::num::&lt;impl usize&gt;::unchecked_add (1,860,956,130 samples, 1.55%)</title><rect x="60.1330%" y="101" width="1.5451%" height="15" fill="rgb(222,201,40)" fg:x="72423890454" fg:w="1860956130"/><text x="60.3830%" y="111.50"></text></g><g><title>&lt;f32 as core::ops::arith::SubAssign&gt;::sub_assign (32,507,167 samples, 0.03%)</title><rect x="61.6781%" y="149" width="0.0270%" height="15" fill="rgb(235,61,29)" fg:x="74284846584" fg:w="32507167"/><text x="61.9281%" y="159.50"></text></g><g><title>core::clone::impls::&lt;impl core::clone::Clone for f32&gt;::clone (12,378,361 samples, 0.01%)</title><rect x="61.7051%" y="149" width="0.0103%" height="15" fill="rgb(219,207,3)" fg:x="74317353751" fg:w="12378361"/><text x="61.9551%" y="159.50"></text></g><g><title>core::iter::traits::iterator::Iterator::for_each (27,088,396,735 samples, 22.49%)</title><rect x="39.2280%" y="277" width="22.4913%" height="15" fill="rgb(222,56,46)" fg:x="47245969059" fg:w="27088396735"/><text x="39.4780%" y="287.50">core::iter::traits::iterator::Iterat..</text></g><g><title>&lt;core::iter::adapters::enumerate::Enumerate&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::fold (27,088,396,735 samples, 22.49%)</title><rect x="39.2280%" y="261" width="22.4913%" height="15" fill="rgb(239,76,54)" fg:x="47245969059" fg:w="27088396735"/><text x="39.4780%" y="271.50">&lt;core::iter::adapters::enumerate::En..</text></g><g><title>&lt;core::slice::iter::IterMut&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::fold (27,088,396,735 samples, 22.49%)</title><rect x="39.2280%" y="245" width="22.4913%" height="15" fill="rgb(231,124,27)" fg:x="47245969059" fg:w="27088396735"/><text x="39.4780%" y="255.50">&lt;core::slice::iter::IterMut&lt;T&gt; as co..</text></g><g><title>&lt;core::iter::adapters::enumerate::Enumerate&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::fold::enumerate::{{closure}} (27,064,408,158 samples, 22.47%)</title><rect x="39.2479%" y="229" width="22.4714%" height="15" fill="rgb(249,195,6)" fg:x="47269957636" fg:w="27064408158"/><text x="39.4979%" y="239.50">&lt;core::iter::adapters::enumerate::En..</text></g><g><title>core::iter::traits::iterator::Iterator::for_each::call::{{closure}} (27,062,859,432 samples, 22.47%)</title><rect x="39.2492%" y="213" width="22.4701%" height="15" fill="rgb(237,174,47)" fg:x="47271506362" fg:w="27062859432"/><text x="39.4992%" y="223.50">core::iter::traits::iterator::Iterat..</text></g><g><title>number_recognition::neural_network::NN::non_parallel_training::{{closure}} (27,062,859,432 samples, 22.47%)</title><rect x="39.2492%" y="197" width="22.4701%" height="15" fill="rgb(206,201,31)" fg:x="47271506362" fg:w="27062859432"/><text x="39.4992%" y="207.50">number_recognition::neural_network::..</text></g><g><title>nalgebra::base::ops::&lt;impl core::ops::arith::SubAssign&lt;&amp;nalgebra::base::matrix::Matrix&lt;T,R2,C2,SB&gt;&gt; for nalgebra::base::matrix::Matrix&lt;T,R1,C1,SA&gt;&gt;::sub_assign (49,519,210 samples, 0.04%)</title><rect x="61.6781%" y="181" width="0.0411%" height="15" fill="rgb(231,57,52)" fg:x="74284846584" fg:w="49519210"/><text x="61.9281%" y="191.50"></text></g><g><title>nalgebra::base::ops::&lt;impl nalgebra::base::matrix::Matrix&lt;T,R1,C1,SA&gt;&gt;::sub_assign_statically_unchecked (49,519,210 samples, 0.04%)</title><rect x="61.6781%" y="165" width="0.0411%" height="15" fill="rgb(248,177,22)" fg:x="74284846584" fg:w="49519210"/><text x="61.9281%" y="175.50"></text></g><g><title>_int_free (32,572,792 samples, 0.03%)</title><rect x="61.7584%" y="85" width="0.0270%" height="15" fill="rgb(215,211,37)" fg:x="74381487322" fg:w="32572792"/><text x="62.0084%" y="95.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (87,473,434 samples, 0.07%)</title><rect x="61.7244%" y="133" width="0.0726%" height="15" fill="rgb(241,128,51)" fg:x="74340517592" fg:w="87473434"/><text x="61.9744%" y="143.50"></text></g><g><title>alloc::alloc::dealloc (87,473,434 samples, 0.07%)</title><rect x="61.7244%" y="117" width="0.0726%" height="15" fill="rgb(227,165,31)" fg:x="74340517592" fg:w="87473434"/><text x="61.9744%" y="127.50"></text></g><g><title>cfree@GLIBC_2.2.5 (79,731,015 samples, 0.07%)</title><rect x="61.7308%" y="101" width="0.0662%" height="15" fill="rgb(228,167,24)" fg:x="74348260011" fg:w="79731015"/><text x="61.9808%" y="111.50"></text></g><g><title>_int_free_merge_chunk (13,930,912 samples, 0.01%)</title><rect x="61.7854%" y="85" width="0.0116%" height="15" fill="rgb(228,143,12)" fg:x="74414060114" fg:w="13930912"/><text x="62.0354%" y="95.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (95,951,638 samples, 0.08%)</title><rect x="61.7193%" y="261" width="0.0797%" height="15" fill="rgb(249,149,8)" fg:x="74334365794" fg:w="95951638"/><text x="61.9693%" y="271.50"></text></g><g><title>core::ptr::drop_in_place&lt;[nalgebra::base::matrix::Matrix&lt;f32,nalgebra::base::dimension::Dyn,nalgebra::base::dimension::Const&lt;1_usize&gt;,nalgebra::base::vec_storage::VecStorage&lt;f32,nalgebra::base::dimension::Dyn,nalgebra::base::dimension::Const&lt;1_usize&gt;&gt;&gt;]&gt; (95,951,638 samples, 0.08%)</title><rect x="61.7193%" y="245" width="0.0797%" height="15" fill="rgb(243,35,44)" fg:x="74334365794" fg:w="95951638"/><text x="61.9693%" y="255.50"></text></g><g><title>core::ptr::drop_in_place&lt;nalgebra::base::matrix::Matrix&lt;f32,nalgebra::base::dimension::Dyn,nalgebra::base::dimension::Const&lt;1_usize&gt;,nalgebra::base::vec_storage::VecStorage&lt;f32,nalgebra::base::dimension::Dyn,nalgebra::base::dimension::Const&lt;1_usize&gt;&gt;&gt;&gt; (95,175,293 samples, 0.08%)</title><rect x="61.7199%" y="229" width="0.0790%" height="15" fill="rgb(246,89,9)" fg:x="74335142139" fg:w="95175293"/><text x="61.9699%" y="239.50"></text></g><g><title>core::ptr::drop_in_place&lt;nalgebra::base::vec_storage::VecStorage&lt;f32,nalgebra::base::dimension::Dyn,nalgebra::base::dimension::Const&lt;1_usize&gt;&gt;&gt; (95,175,293 samples, 0.08%)</title><rect x="61.7199%" y="213" width="0.0790%" height="15" fill="rgb(233,213,13)" fg:x="74335142139" fg:w="95175293"/><text x="61.9699%" y="223.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;f32&gt;&gt; (95,175,293 samples, 0.08%)</title><rect x="61.7199%" y="197" width="0.0790%" height="15" fill="rgb(233,141,41)" fg:x="74335142139" fg:w="95175293"/><text x="61.9699%" y="207.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;f32&gt;&gt; (95,175,293 samples, 0.08%)</title><rect x="61.7199%" y="181" width="0.0790%" height="15" fill="rgb(239,167,4)" fg:x="74335142139" fg:w="95175293"/><text x="61.9699%" y="191.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (95,175,293 samples, 0.08%)</title><rect x="61.7199%" y="165" width="0.0790%" height="15" fill="rgb(209,217,16)" fg:x="74335142139" fg:w="95175293"/><text x="61.9699%" y="175.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::deallocate (89,799,840 samples, 0.07%)</title><rect x="61.7244%" y="149" width="0.0746%" height="15" fill="rgb(219,88,35)" fg:x="74340517592" fg:w="89799840"/><text x="61.9744%" y="159.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (13,150,580 samples, 0.01%)</title><rect x="61.7989%" y="213" width="0.0109%" height="15" fill="rgb(220,193,23)" fg:x="74430317432" fg:w="13150580"/><text x="62.0489%" y="223.50"></text></g><g><title>alloc::alloc::dealloc (13,150,580 samples, 0.01%)</title><rect x="61.7989%" y="197" width="0.0109%" height="15" fill="rgb(230,90,52)" fg:x="74430317432" fg:w="13150580"/><text x="62.0489%" y="207.50"></text></g><g><title>cfree@GLIBC_2.2.5 (12,375,787 samples, 0.01%)</title><rect x="61.7996%" y="181" width="0.0103%" height="15" fill="rgb(252,106,19)" fg:x="74431092225" fg:w="12375787"/><text x="62.0496%" y="191.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;nalgebra::base::matrix::Matrix&lt;f32,nalgebra::base::dimension::Dyn,nalgebra::base::dimension::Const&lt;1_usize&gt;,nalgebra::base::vec_storage::VecStorage&lt;f32,nalgebra::base::dimension::Dyn,nalgebra::base::dimension::Const&lt;1_usize&gt;&gt;&gt;&gt;&gt; (109,912,214 samples, 0.09%)</title><rect x="61.7193%" y="277" width="0.0913%" height="15" fill="rgb(206,74,20)" fg:x="74334365794" fg:w="109912214"/><text x="61.9693%" y="287.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;nalgebra::base::matrix::Matrix&lt;f32,nalgebra::base::dimension::Dyn,nalgebra::base::dimension::Const&lt;1_usize&gt;,nalgebra::base::vec_storage::VecStorage&lt;f32,nalgebra::base::dimension::Dyn,nalgebra::base::dimension::Const&lt;1_usize&gt;&gt;&gt;&gt;&gt; (13,960,576 samples, 0.01%)</title><rect x="61.7989%" y="261" width="0.0116%" height="15" fill="rgb(230,138,44)" fg:x="74430317432" fg:w="13960576"/><text x="62.0489%" y="271.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (13,960,576 samples, 0.01%)</title><rect x="61.7989%" y="245" width="0.0116%" height="15" fill="rgb(235,182,43)" fg:x="74430317432" fg:w="13960576"/><text x="62.0489%" y="255.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::deallocate (13,960,576 samples, 0.01%)</title><rect x="61.7989%" y="229" width="0.0116%" height="15" fill="rgb(242,16,51)" fg:x="74430317432" fg:w="13960576"/><text x="62.0489%" y="239.50"></text></g><g><title>__rustc::__rdl_dealloc (16,244,283 samples, 0.01%)</title><rect x="61.8240%" y="101" width="0.0135%" height="15" fill="rgb(248,9,4)" fg:x="74460557762" fg:w="16244283"/><text x="62.0740%" y="111.50"></text></g><g><title>std::sys::alloc::unix::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::dealloc (16,244,283 samples, 0.01%)</title><rect x="61.8240%" y="85" width="0.0135%" height="15" fill="rgb(210,31,22)" fg:x="74460557762" fg:w="16244283"/><text x="62.0740%" y="95.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (160,905,825 samples, 0.13%)</title><rect x="61.8137%" y="261" width="0.1336%" height="15" fill="rgb(239,54,39)" fg:x="74448148949" fg:w="160905825"/><text x="62.0637%" y="271.50"></text></g><g><title>core::ptr::drop_in_place&lt;[nalgebra::base::matrix::Matrix&lt;f32,nalgebra::base::dimension::Dyn,nalgebra::base::dimension::Dyn,nalgebra::base::vec_storage::VecStorage&lt;f32,nalgebra::base::dimension::Dyn,nalgebra::base::dimension::Dyn&gt;&gt;]&gt; (160,905,825 samples, 0.13%)</title><rect x="61.8137%" y="245" width="0.1336%" height="15" fill="rgb(230,99,41)" fg:x="74448148949" fg:w="160905825"/><text x="62.0637%" y="255.50"></text></g><g><title>core::ptr::drop_in_place&lt;nalgebra::base::matrix::Matrix&lt;f32,nalgebra::base::dimension::Dyn,nalgebra::base::dimension::Dyn,nalgebra::base::vec_storage::VecStorage&lt;f32,nalgebra::base::dimension::Dyn,nalgebra::base::dimension::Dyn&gt;&gt;&gt; (158,578,881 samples, 0.13%)</title><rect x="61.8157%" y="229" width="0.1317%" height="15" fill="rgb(253,106,12)" fg:x="74450475893" fg:w="158578881"/><text x="62.0657%" y="239.50"></text></g><g><title>core::ptr::drop_in_place&lt;nalgebra::base::vec_storage::VecStorage&lt;f32,nalgebra::base::dimension::Dyn,nalgebra::base::dimension::Dyn&gt;&gt; (158,578,881 samples, 0.13%)</title><rect x="61.8157%" y="213" width="0.1317%" height="15" fill="rgb(213,46,41)" fg:x="74450475893" fg:w="158578881"/><text x="62.0657%" y="223.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;f32&gt;&gt; (158,578,881 samples, 0.13%)</title><rect x="61.8157%" y="197" width="0.1317%" height="15" fill="rgb(215,133,35)" fg:x="74450475893" fg:w="158578881"/><text x="62.0657%" y="207.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;f32&gt;&gt; (158,578,881 samples, 0.13%)</title><rect x="61.8157%" y="181" width="0.1317%" height="15" fill="rgb(213,28,5)" fg:x="74450475893" fg:w="158578881"/><text x="62.0657%" y="191.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (158,578,881 samples, 0.13%)</title><rect x="61.8157%" y="165" width="0.1317%" height="15" fill="rgb(215,77,49)" fg:x="74450475893" fg:w="158578881"/><text x="62.0657%" y="175.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::deallocate (150,825,030 samples, 0.13%)</title><rect x="61.8221%" y="149" width="0.1252%" height="15" fill="rgb(248,100,22)" fg:x="74458229744" fg:w="150825030"/><text x="62.0721%" y="159.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (150,825,030 samples, 0.13%)</title><rect x="61.8221%" y="133" width="0.1252%" height="15" fill="rgb(208,67,9)" fg:x="74458229744" fg:w="150825030"/><text x="62.0721%" y="143.50"></text></g><g><title>alloc::alloc::dealloc (150,825,030 samples, 0.13%)</title><rect x="61.8221%" y="117" width="0.1252%" height="15" fill="rgb(219,133,21)" fg:x="74458229744" fg:w="150825030"/><text x="62.0721%" y="127.50"></text></g><g><title>cfree@GLIBC_2.2.5 (126,846,430 samples, 0.11%)</title><rect x="61.8420%" y="101" width="0.1053%" height="15" fill="rgb(246,46,29)" fg:x="74482208344" fg:w="126846430"/><text x="62.0920%" y="111.50"></text></g><g><title>_int_free_merge_chunk (59,573,801 samples, 0.05%)</title><rect x="61.8979%" y="85" width="0.0495%" height="15" fill="rgb(246,185,52)" fg:x="74549480973" fg:w="59573801"/><text x="62.1479%" y="95.50"></text></g><g><title>_int_free_create_chunk (31,720,170 samples, 0.03%)</title><rect x="61.9210%" y="69" width="0.0263%" height="15" fill="rgb(252,136,11)" fg:x="74577334604" fg:w="31720170"/><text x="62.1710%" y="79.50"></text></g><g><title>number_recognition::neural_network::NN::non_parallel_training (27,492,283,243 samples, 22.83%)</title><rect x="39.1278%" y="293" width="22.8266%" height="15" fill="rgb(219,138,53)" fg:x="47125304411" fg:w="27492283243"/><text x="39.3778%" y="303.50">number_recognition::neural_network::..</text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;nalgebra::base::matrix::Matrix&lt;f32,nalgebra::base::dimension::Dyn,nalgebra::base::dimension::Dyn,nalgebra::base::vec_storage::VecStorage&lt;f32,nalgebra::base::dimension::Dyn,nalgebra::base::dimension::Dyn&gt;&gt;&gt;&gt; (173,309,646 samples, 0.14%)</title><rect x="61.8105%" y="277" width="0.1439%" height="15" fill="rgb(211,51,23)" fg:x="74444278008" fg:w="173309646"/><text x="62.0605%" y="287.50"></text></g><g><title>[unknown] (71,823,179,252 samples, 59.63%)</title><rect x="2.3309%" y="309" width="59.6342%" height="15" fill="rgb(247,221,28)" fg:x="2807287078" fg:w="71823179252"/><text x="2.5809%" y="319.50">[unknown]</text></g><g><title>__rustc::__rdl_realloc (17,023,217 samples, 0.01%)</title><rect x="61.9744%" y="309" width="0.0141%" height="15" fill="rgb(251,222,45)" fg:x="74641688480" fg:w="17023217"/><text x="62.2244%" y="319.50"></text></g><g><title>std::sys::alloc::unix::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::realloc (15,495,823 samples, 0.01%)</title><rect x="61.9757%" y="293" width="0.0129%" height="15" fill="rgb(217,162,53)" fg:x="74643215874" fg:w="15495823"/><text x="62.2257%" y="303.50"></text></g><g><title>alloc::raw_vec::finish_grow (295,890,370 samples, 0.25%)</title><rect x="62.0184%" y="309" width="0.2457%" height="15" fill="rgb(229,93,14)" fg:x="74694593301" fg:w="295890370"/><text x="62.2684%" y="319.50"></text></g><g><title>malloc (266,212,703 samples, 0.22%)</title><rect x="62.0430%" y="293" width="0.2210%" height="15" fill="rgb(209,67,49)" fg:x="74724270968" fg:w="266212703"/><text x="62.2930%" y="303.50"></text></g><g><title>_int_malloc (169,551,732 samples, 0.14%)</title><rect x="62.1233%" y="277" width="0.1408%" height="15" fill="rgb(213,87,29)" fg:x="74820931939" fg:w="169551732"/><text x="62.3733%" y="287.50"></text></g><g><title>unlink_chunk.isra.0 (22,464,033 samples, 0.02%)</title><rect x="62.2454%" y="261" width="0.0187%" height="15" fill="rgb(205,151,52)" fg:x="74968019638" fg:w="22464033"/><text x="62.4954%" y="271.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (32,505,059 samples, 0.03%)</title><rect x="62.2642%" y="181" width="0.0270%" height="15" fill="rgb(253,215,39)" fg:x="74990717930" fg:w="32505059"/><text x="62.5142%" y="191.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (32,505,059 samples, 0.03%)</title><rect x="62.2642%" y="165" width="0.0270%" height="15" fill="rgb(221,220,41)" fg:x="74990717930" fg:w="32505059"/><text x="62.5142%" y="175.50"></text></g><g><title>alloc::alloc::alloc (32,505,059 samples, 0.03%)</title><rect x="62.2642%" y="149" width="0.0270%" height="15" fill="rgb(218,133,21)" fg:x="74990717930" fg:w="32505059"/><text x="62.5142%" y="159.50"></text></g><g><title>malloc (32,267,321 samples, 0.03%)</title><rect x="62.2644%" y="133" width="0.0268%" height="15" fill="rgb(221,193,43)" fg:x="74990955668" fg:w="32267321"/><text x="62.5144%" y="143.50"></text></g><g><title>_int_malloc (30,287,270 samples, 0.03%)</title><rect x="62.2661%" y="117" width="0.0251%" height="15" fill="rgb(240,128,52)" fg:x="74992935719" fg:w="30287270"/><text x="62.5161%" y="127.50"></text></g><g><title>alloc::vec::in_place_collect::&lt;impl alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt; for alloc::vec::Vec&lt;T&gt;&gt;::from_iter (33,209,582 samples, 0.03%)</title><rect x="62.2640%" y="309" width="0.0276%" height="15" fill="rgb(253,114,12)" fg:x="74990483671" fg:w="33209582"/><text x="62.5140%" y="319.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter_nested::SpecFromIterNested&lt;T,I&gt;&gt;::from_iter{{reify.shim}} (32,975,323 samples, 0.03%)</title><rect x="62.2642%" y="293" width="0.0274%" height="15" fill="rgb(215,223,47)" fg:x="74990717930" fg:w="32975323"/><text x="62.5142%" y="303.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter_nested::SpecFromIterNested&lt;T,I&gt;&gt;::from_iter (32,975,323 samples, 0.03%)</title><rect x="62.2642%" y="277" width="0.0274%" height="15" fill="rgb(248,225,23)" fg:x="74990717930" fg:w="32975323"/><text x="62.5142%" y="287.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::with_capacity (32,975,323 samples, 0.03%)</title><rect x="62.2642%" y="261" width="0.0274%" height="15" fill="rgb(250,108,0)" fg:x="74990717930" fg:w="32975323"/><text x="62.5142%" y="271.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (32,975,323 samples, 0.03%)</title><rect x="62.2642%" y="245" width="0.0274%" height="15" fill="rgb(228,208,7)" fg:x="74990717930" fg:w="32975323"/><text x="62.5142%" y="255.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (32,975,323 samples, 0.03%)</title><rect x="62.2642%" y="229" width="0.0274%" height="15" fill="rgb(244,45,10)" fg:x="74990717930" fg:w="32975323"/><text x="62.5142%" y="239.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::with_capacity_in (32,975,323 samples, 0.03%)</title><rect x="62.2642%" y="213" width="0.0274%" height="15" fill="rgb(207,125,25)" fg:x="74990717930" fg:w="32975323"/><text x="62.5142%" y="223.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::try_allocate_in (32,975,323 samples, 0.03%)</title><rect x="62.2642%" y="197" width="0.0274%" height="15" fill="rgb(210,195,18)" fg:x="74990717930" fg:w="32975323"/><text x="62.5142%" y="207.50"></text></g><g><title>_int_free (13,143,140 samples, 0.01%)</title><rect x="62.2935%" y="293" width="0.0109%" height="15" fill="rgb(249,80,12)" fg:x="75026013675" fg:w="13143140"/><text x="62.5435%" y="303.50"></text></g><g><title>cfree@GLIBC_2.2.5 (18,564,772 samples, 0.02%)</title><rect x="62.2916%" y="309" width="0.0154%" height="15" fill="rgb(221,65,9)" fg:x="75023693253" fg:w="18564772"/><text x="62.5416%" y="319.50"></text></g><g><title>core::iter::range::&lt;impl core::iter::traits::iterator::Iterator for core::ops::range::Range&lt;A&gt;&gt;::next (467,350,209 samples, 0.39%)</title><rect x="62.3484%" y="261" width="0.3880%" height="15" fill="rgb(235,49,36)" fg:x="75092095984" fg:w="467350209"/><text x="62.5984%" y="271.50"></text></g><g><title>&lt;core::ops::range::Range&lt;T&gt; as core::iter::range::RangeIteratorImpl&gt;::spec_next (467,350,209 samples, 0.39%)</title><rect x="62.3484%" y="245" width="0.3880%" height="15" fill="rgb(225,32,20)" fg:x="75092095984" fg:w="467350209"/><text x="62.5984%" y="255.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialOrd for usize&gt;::lt (390,666,564 samples, 0.32%)</title><rect x="62.4121%" y="229" width="0.3244%" height="15" fill="rgb(215,141,46)" fg:x="75168779629" fg:w="390666564"/><text x="62.6621%" y="239.50"></text></g><g><title>&lt;f32 as core::ops::arith::Mul&gt;::mul (22,441,066 samples, 0.02%)</title><rect x="62.7371%" y="229" width="0.0186%" height="15" fill="rgb(250,160,47)" fg:x="75560222006" fg:w="22441066"/><text x="62.9871%" y="239.50"></text></g><g><title>&lt;nalgebra::base::uninit::Uninit as nalgebra::base::uninit::InitStatus&lt;T&gt;&gt;::init (32,475,959 samples, 0.03%)</title><rect x="62.7557%" y="229" width="0.0270%" height="15" fill="rgb(216,222,40)" fg:x="75582663072" fg:w="32475959"/><text x="63.0057%" y="239.50"></text></g><g><title>core::clone::impls::&lt;impl core::clone::Clone for f32&gt;::clone (78,889,102 samples, 0.07%)</title><rect x="62.7827%" y="229" width="0.0655%" height="15" fill="rgb(234,217,39)" fg:x="75615139031" fg:w="78889102"/><text x="63.0327%" y="239.50"></text></g><g><title>nalgebra::base::blas_uninit::array_axc (145,427,610 samples, 0.12%)</title><rect x="62.7364%" y="245" width="0.1207%" height="15" fill="rgb(207,178,40)" fg:x="75559446193" fg:w="145427610"/><text x="62.9864%" y="255.50"></text></g><g><title>&lt;f32 as core::ops::arith::Add&gt;::add (12,759,163,483 samples, 10.59%)</title><rect x="72.7499%" y="229" width="10.5938%" height="15" fill="rgb(221,136,13)" fg:x="87619601399" fg:w="12759163483"/><text x="72.9999%" y="239.50">&lt;f32 as core::o..</text></g><g><title>&lt;f32 as core::ops::arith::Mul&gt;::mul (2,112,693,180 samples, 1.75%)</title><rect x="83.3437%" y="229" width="1.7542%" height="15" fill="rgb(249,199,10)" fg:x="100378764882" fg:w="2112693180"/><text x="83.5937%" y="239.50"></text></g><g><title>core::clone::impls::&lt;impl core::clone::Clone for f32&gt;::clone (16,350,626,031 samples, 13.58%)</title><rect x="85.0979%" y="229" width="13.5758%" height="15" fill="rgb(249,222,13)" fg:x="102491458062" fg:w="16350626031"/><text x="85.3479%" y="239.50">core::clone::impls::&lt;..</text></g><g><title>&lt;usize as core::iter::range::Step&gt;::forward_unchecked (67,445,128 samples, 0.06%)</title><rect x="99.4856%" y="197" width="0.0560%" height="15" fill="rgb(244,185,38)" fg:x="119819977729" fg:w="67445128"/><text x="99.7356%" y="207.50"></text></g><g><title>core::num::&lt;impl usize&gt;::unchecked_add (67,445,128 samples, 0.06%)</title><rect x="99.4856%" y="181" width="0.0560%" height="15" fill="rgb(236,202,9)" fg:x="119819977729" fg:w="67445128"/><text x="99.7356%" y="191.50"></text></g><g><title>nalgebra::base::blas_uninit::gemm_uninit (44,818,545,086 samples, 37.21%)</title><rect x="62.3388%" y="293" width="37.2125%" height="15" fill="rgb(250,229,37)" fg:x="75080478266" fg:w="44818545086"/><text x="62.5888%" y="303.50">nalgebra::base::blas_uninit::gemm_uninit</text></g><g><title>nalgebra::base::blas_uninit::gemv_uninit (44,818,545,086 samples, 37.21%)</title><rect x="62.3388%" y="277" width="37.2125%" height="15" fill="rgb(206,174,23)" fg:x="75080478266" fg:w="44818545086"/><text x="62.5888%" y="287.50">nalgebra::base::blas_uninit::gemv_uninit</text></g><g><title>nalgebra::base::blas_uninit::axcpy_uninit (44,339,577,159 samples, 36.81%)</title><rect x="62.7364%" y="261" width="36.8148%" height="15" fill="rgb(211,33,43)" fg:x="75559446193" fg:w="44339577159"/><text x="62.9864%" y="271.50">nalgebra::base::blas_uninit::axcpy_uninit</text></g><g><title>nalgebra::base::blas_uninit::array_axcpy (44,194,149,549 samples, 36.69%)</title><rect x="62.8572%" y="245" width="36.6941%" height="15" fill="rgb(245,58,50)" fg:x="75704873803" fg:w="44194149549"/><text x="63.1072%" y="255.50">nalgebra::base::blas_uninit::array_axcpy</text></g><g><title>core::iter::range::&lt;impl core::iter::traits::iterator::Iterator for core::ops::range::Range&lt;A&gt;&gt;::next (1,056,939,259 samples, 0.88%)</title><rect x="98.6737%" y="229" width="0.8776%" height="15" fill="rgb(244,68,36)" fg:x="118842084093" fg:w="1056939259"/><text x="98.9237%" y="239.50"></text></g><g><title>&lt;core::ops::range::Range&lt;T&gt; as core::iter::range::RangeIteratorImpl&gt;::spec_next (1,056,939,259 samples, 0.88%)</title><rect x="98.6737%" y="213" width="0.8776%" height="15" fill="rgb(232,229,15)" fg:x="118842084093" fg:w="1056939259"/><text x="98.9237%" y="223.50"></text></g><g><title>nalgebra::base::construction::&lt;impl nalgebra::base::matrix::Matrix&lt;core::mem::maybe_uninit::MaybeUninit&lt;T&gt;,R,C,&lt;nalgebra::base::default_allocator::DefaultAllocator as nalgebra::base::allocator::Allocator&lt;R,C&gt;&gt;::BufferUninit&lt;T&gt;&gt;&gt;::uninit (25,567,932 samples, 0.02%)</title><rect x="99.5513%" y="293" width="0.0212%" height="15" fill="rgb(254,30,23)" fg:x="119899023352" fg:w="25567932"/><text x="99.8013%" y="303.50"></text></g><g><title>&lt;nalgebra::base::default_allocator::DefaultAllocator as nalgebra::base::allocator::Allocator&lt;nalgebra::base::dimension::Dyn,C&gt;&gt;::allocate_uninit (25,567,932 samples, 0.02%)</title><rect x="99.5513%" y="277" width="0.0212%" height="15" fill="rgb(235,160,14)" fg:x="119899023352" fg:w="25567932"/><text x="99.8013%" y="287.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::reserve_exact (25,567,932 samples, 0.02%)</title><rect x="99.5513%" y="261" width="0.0212%" height="15" fill="rgb(212,155,44)" fg:x="119899023352" fg:w="25567932"/><text x="99.8013%" y="271.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_exact (25,567,932 samples, 0.02%)</title><rect x="99.5513%" y="245" width="0.0212%" height="15" fill="rgb(226,2,50)" fg:x="119899023352" fg:w="25567932"/><text x="99.8013%" y="255.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::reserve_exact (25,567,932 samples, 0.02%)</title><rect x="99.5513%" y="229" width="0.0212%" height="15" fill="rgb(234,177,6)" fg:x="119899023352" fg:w="25567932"/><text x="99.8013%" y="239.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::try_reserve_exact (24,792,289 samples, 0.02%)</title><rect x="99.5519%" y="213" width="0.0206%" height="15" fill="rgb(217,24,9)" fg:x="119899798995" fg:w="24792289"/><text x="99.8019%" y="223.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::grow_exact (22,464,696 samples, 0.02%)</title><rect x="99.5538%" y="197" width="0.0187%" height="15" fill="rgb(220,13,46)" fg:x="119902126588" fg:w="22464696"/><text x="99.8038%" y="207.50"></text></g><g><title>alloc::raw_vec::layout_array (12,398,631 samples, 0.01%)</title><rect x="99.5622%" y="181" width="0.0103%" height="15" fill="rgb(239,221,27)" fg:x="119912192653" fg:w="12398631"/><text x="99.8122%" y="191.50"></text></g><g><title>core::alloc::layout::Layout::repeat (12,398,631 samples, 0.01%)</title><rect x="99.5622%" y="165" width="0.0103%" height="15" fill="rgb(222,198,25)" fg:x="119912192653" fg:w="12398631"/><text x="99.8122%" y="175.50"></text></g><g><title>core::alloc::layout::Layout::repeat_packed (12,398,631 samples, 0.01%)</title><rect x="99.5622%" y="149" width="0.0103%" height="15" fill="rgb(211,99,13)" fg:x="119912192653" fg:w="12398631"/><text x="99.8122%" y="159.50"></text></g><g><title>core::num::&lt;impl usize&gt;::checked_mul (12,398,631 samples, 0.01%)</title><rect x="99.5622%" y="133" width="0.0103%" height="15" fill="rgb(232,111,31)" fg:x="119912192653" fg:w="12398631"/><text x="99.8122%" y="143.50"></text></g><g><title>nalgebra::base::matrix::Matrix&lt;T,R,C,S&gt;::shape_generic (31,852,697 samples, 0.03%)</title><rect x="99.5725%" y="293" width="0.0264%" height="15" fill="rgb(245,82,37)" fg:x="119924591284" fg:w="31852697"/><text x="99.8225%" y="303.50"></text></g><g><title>nalgebra::base::ops::&lt;impl core::ops::arith::Mul&lt;&amp;nalgebra::base::matrix::Matrix&lt;T,R2,C2,SB&gt;&gt; for &amp;nalgebra::base::matrix::Matrix&lt;T,R1,C1,SA&gt;&gt;::mul (44,904,623,836 samples, 37.28%)</title><rect x="62.3188%" y="309" width="37.2840%" height="15" fill="rgb(227,149,46)" fg:x="75056480859" fg:w="44904623836"/><text x="62.5688%" y="319.50">nalgebra::base::ops::&lt;impl core::ops::arith::Mul&lt;&amp;nalgebra::b..</text></g><g><title>nalgebra::base::ops::&lt;impl core::ops::arith::Sub&lt;&amp;nalgebra::base::matrix::Matrix&lt;T,R2,C2,SB&gt;&gt; for &amp;nalgebra::base::matrix::Matrix&lt;T,R1,C1,SA&gt;&gt;::sub (19,334,661 samples, 0.02%)</title><rect x="99.6028%" y="309" width="0.0161%" height="15" fill="rgb(218,36,50)" fg:x="119961104695" fg:w="19334661"/><text x="99.8528%" y="319.50"></text></g><g><title>nalgebra::base::ops::&lt;impl nalgebra::base::matrix::Matrix&lt;T,R1,C1,SA&gt;&gt;::sub_to_statically_unchecked_uninit (17,007,462 samples, 0.01%)</title><rect x="99.6047%" y="293" width="0.0141%" height="15" fill="rgb(226,80,48)" fg:x="119963431894" fg:w="17007462"/><text x="99.8547%" y="303.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (43,391,105 samples, 0.04%)</title><rect x="99.6542%" y="149" width="0.0360%" height="15" fill="rgb(238,224,15)" fg:x="120022951901" fg:w="43391105"/><text x="99.9042%" y="159.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (43,391,105 samples, 0.04%)</title><rect x="99.6542%" y="133" width="0.0360%" height="15" fill="rgb(241,136,10)" fg:x="120022951901" fg:w="43391105"/><text x="99.9042%" y="143.50"></text></g><g><title>alloc::alloc::alloc (43,391,105 samples, 0.04%)</title><rect x="99.6542%" y="117" width="0.0360%" height="15" fill="rgb(208,32,45)" fg:x="120022951901" fg:w="43391105"/><text x="99.9042%" y="127.50"></text></g><g><title>malloc (43,391,105 samples, 0.04%)</title><rect x="99.6542%" y="101" width="0.0360%" height="15" fill="rgb(207,135,9)" fg:x="120022951901" fg:w="43391105"/><text x="99.9042%" y="111.50"></text></g><g><title>_int_malloc (42,615,950 samples, 0.04%)</title><rect x="99.6548%" y="85" width="0.0354%" height="15" fill="rgb(206,86,44)" fg:x="120023727056" fg:w="42615950"/><text x="99.9048%" y="95.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (46,492,683 samples, 0.04%)</title><rect x="99.6529%" y="213" width="0.0386%" height="15" fill="rgb(245,177,15)" fg:x="120021401785" fg:w="46492683"/><text x="99.9029%" y="223.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (46,492,683 samples, 0.04%)</title><rect x="99.6529%" y="197" width="0.0386%" height="15" fill="rgb(206,64,50)" fg:x="120021401785" fg:w="46492683"/><text x="99.9029%" y="207.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::with_capacity_in (46,492,683 samples, 0.04%)</title><rect x="99.6529%" y="181" width="0.0386%" height="15" fill="rgb(234,36,40)" fg:x="120021401785" fg:w="46492683"/><text x="99.9029%" y="191.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::try_allocate_in (46,492,683 samples, 0.04%)</title><rect x="99.6529%" y="165" width="0.0386%" height="15" fill="rgb(213,64,8)" fg:x="120021401785" fg:w="46492683"/><text x="99.9029%" y="175.50"></text></g><g><title>&lt;nalgebra::base::matrix::Matrix&lt;T,R,C,S&gt; as core::clone::Clone&gt;::clone (197,490,404 samples, 0.16%)</title><rect x="99.6458%" y="293" width="0.1640%" height="15" fill="rgb(210,75,36)" fg:x="120012887607" fg:w="197490404"/><text x="99.8958%" y="303.50"></text></g><g><title>&lt;nalgebra::base::vec_storage::VecStorage&lt;T,R,C&gt; as core::clone::Clone&gt;::clone (197,490,404 samples, 0.16%)</title><rect x="99.6458%" y="277" width="0.1640%" height="15" fill="rgb(229,88,21)" fg:x="120012887607" fg:w="197490404"/><text x="99.8958%" y="287.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (197,490,404 samples, 0.16%)</title><rect x="99.6458%" y="261" width="0.1640%" height="15" fill="rgb(252,204,47)" fg:x="120012887607" fg:w="197490404"/><text x="99.8958%" y="271.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (188,976,226 samples, 0.16%)</title><rect x="99.6529%" y="245" width="0.1569%" height="15" fill="rgb(208,77,27)" fg:x="120021401785" fg:w="188976226"/><text x="99.9029%" y="255.50"></text></g><g><title>&lt;T as alloc::slice::&lt;impl [T]&gt;::to_vec_in::ConvertVec&gt;::to_vec (188,976,226 samples, 0.16%)</title><rect x="99.6529%" y="229" width="0.1569%" height="15" fill="rgb(221,76,26)" fg:x="120021401785" fg:w="188976226"/><text x="99.9029%" y="239.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::copy_to_nonoverlapping (142,483,543 samples, 0.12%)</title><rect x="99.6915%" y="213" width="0.1183%" height="15" fill="rgb(225,139,18)" fg:x="120067894468" fg:w="142483543"/><text x="99.9415%" y="223.50"></text></g><g><title>core::ptr::copy_nonoverlapping (142,483,543 samples, 0.12%)</title><rect x="99.6915%" y="197" width="0.1183%" height="15" fill="rgb(230,137,11)" fg:x="120067894468" fg:w="142483543"/><text x="99.9415%" y="207.50"></text></g><g><title>__memmove_avx_unaligned_erms (139,384,396 samples, 0.12%)</title><rect x="99.6940%" y="181" width="0.1157%" height="15" fill="rgb(212,28,1)" fg:x="120070993615" fg:w="139384396"/><text x="99.9440%" y="191.50"></text></g><g><title>alloc::raw_vec::finish_grow (37,151,167 samples, 0.03%)</title><rect x="99.8149%" y="293" width="0.0308%" height="15" fill="rgb(248,164,17)" fg:x="120216573861" fg:w="37151167"/><text x="100.0649%" y="303.50"></text></g><g><title>malloc (34,824,942 samples, 0.03%)</title><rect x="99.8168%" y="277" width="0.0289%" height="15" fill="rgb(222,171,42)" fg:x="120218900086" fg:w="34824942"/><text x="100.0668%" y="287.50"></text></g><g><title>core::ptr::drop_in_place&lt;nalgebra::base::matrix::Matrix&lt;f32,nalgebra::base::dimension::Dyn,nalgebra::base::dimension::Const&lt;1_usize&gt;,nalgebra::base::vec_storage::VecStorage&lt;f32,nalgebra::base::dimension::Dyn,nalgebra::base::dimension::Const&lt;1_usize&gt;&gt;&gt;&gt; (20,890,764 samples, 0.02%)</title><rect x="99.8586%" y="293" width="0.0173%" height="15" fill="rgb(243,84,45)" fg:x="120269202739" fg:w="20890764"/><text x="100.1086%" y="303.50"></text></g><g><title>core::ptr::drop_in_place&lt;nalgebra::base::vec_storage::VecStorage&lt;f32,nalgebra::base::dimension::Dyn,nalgebra::base::dimension::Const&lt;1_usize&gt;&gt;&gt; (20,890,764 samples, 0.02%)</title><rect x="99.8586%" y="277" width="0.0173%" height="15" fill="rgb(252,49,23)" fg:x="120269202739" fg:w="20890764"/><text x="100.1086%" y="287.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;f32&gt;&gt; (20,890,764 samples, 0.02%)</title><rect x="99.8586%" y="261" width="0.0173%" height="15" fill="rgb(215,19,7)" fg:x="120269202739" fg:w="20890764"/><text x="100.1086%" y="271.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;f32&gt;&gt; (20,890,764 samples, 0.02%)</title><rect x="99.8586%" y="245" width="0.0173%" height="15" fill="rgb(238,81,41)" fg:x="120269202739" fg:w="20890764"/><text x="100.1086%" y="255.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (20,890,764 samples, 0.02%)</title><rect x="99.8586%" y="229" width="0.0173%" height="15" fill="rgb(210,199,37)" fg:x="120269202739" fg:w="20890764"/><text x="100.1086%" y="239.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::deallocate (20,890,764 samples, 0.02%)</title><rect x="99.8586%" y="213" width="0.0173%" height="15" fill="rgb(244,192,49)" fg:x="120269202739" fg:w="20890764"/><text x="100.1086%" y="223.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (20,890,764 samples, 0.02%)</title><rect x="99.8586%" y="197" width="0.0173%" height="15" fill="rgb(226,211,11)" fg:x="120269202739" fg:w="20890764"/><text x="100.1086%" y="207.50"></text></g><g><title>alloc::alloc::dealloc (20,890,764 samples, 0.02%)</title><rect x="99.8586%" y="181" width="0.0173%" height="15" fill="rgb(236,162,54)" fg:x="120269202739" fg:w="20890764"/><text x="100.1086%" y="191.50"></text></g><g><title>cfree@GLIBC_2.2.5 (19,339,374 samples, 0.02%)</title><rect x="99.8599%" y="165" width="0.0161%" height="15" fill="rgb(220,229,9)" fg:x="120270754129" fg:w="19339374"/><text x="100.1099%" y="175.50"></text></g><g><title>core::ops::function::FnMut::call_mut (16,279,136 samples, 0.01%)</title><rect x="99.8895%" y="277" width="0.0135%" height="15" fill="rgb(250,87,22)" fg:x="120306358452" fg:w="16279136"/><text x="100.1395%" y="287.50"></text></g><g><title>number_recognition::activation_functions::relu (16,279,136 samples, 0.01%)</title><rect x="99.8895%" y="261" width="0.0135%" height="15" fill="rgb(239,43,17)" fg:x="120306358452" fg:w="16279136"/><text x="100.1395%" y="271.50"></text></g><g><title>nalgebra::base::matrix::Matrix&lt;T,R,C,S&gt;::map (34,862,501 samples, 0.03%)</title><rect x="99.8760%" y="293" width="0.0289%" height="15" fill="rgb(231,177,25)" fg:x="120290093503" fg:w="34862501"/><text x="100.1260%" y="303.50"></text></g><g><title>&lt;f32 as core::ops::arith::AddAssign&gt;::add_assign (34,853,205 samples, 0.03%)</title><rect x="99.9178%" y="261" width="0.0289%" height="15" fill="rgb(219,179,1)" fg:x="120340469236" fg:w="34853205"/><text x="100.1678%" y="271.50"></text></g><g><title>core::clone::impls::&lt;impl core::clone::Clone for f32&gt;::clone (38,728,544 samples, 0.03%)</title><rect x="99.9467%" y="261" width="0.0322%" height="15" fill="rgb(238,219,53)" fg:x="120375322441" fg:w="38728544"/><text x="100.1967%" y="271.50"></text></g><g><title>number_recognition::neural_network::NN::forward_pass (428,964,990 samples, 0.36%)</title><rect x="99.6311%" y="309" width="0.3562%" height="15" fill="rgb(232,167,36)" fg:x="119995153092" fg:w="428964990"/><text x="99.8811%" y="319.50"></text></g><g><title>nalgebra::base::ops::&lt;impl core::ops::arith::Add&lt;&amp;nalgebra::base::matrix::Matrix&lt;T,R2,C2,SB&gt;&gt; for nalgebra::base::matrix::Matrix&lt;T,R1,C1,SA&gt;&gt;::add (99,162,078 samples, 0.08%)</title><rect x="99.9049%" y="293" width="0.0823%" height="15" fill="rgb(244,19,51)" fg:x="120324956004" fg:w="99162078"/><text x="100.1549%" y="303.50"></text></g><g><title>nalgebra::base::ops::&lt;impl nalgebra::base::matrix::Matrix&lt;T,R1,C1,SA&gt;&gt;::add_assign_statically_unchecked (83,648,846 samples, 0.07%)</title><rect x="99.9178%" y="277" width="0.0695%" height="15" fill="rgb(224,6,22)" fg:x="120340469236" fg:w="83648846"/><text x="100.1678%" y="287.50"></text></g><g><title>all (120,439,487,556 samples, 100%)</title><rect x="0.0000%" y="341" width="100.0000%" height="15" fill="rgb(224,145,5)" fg:x="0" fg:w="120439487556"/><text x="0.2500%" y="351.50"></text></g><g><title>number_recognit (120,439,487,556 samples, 100.00%)</title><rect x="0.0000%" y="325" width="100.0000%" height="15" fill="rgb(234,130,49)" fg:x="0" fg:w="120439487556"/><text x="0.2500%" y="335.50">number_recognit</text></g></svg></svg>